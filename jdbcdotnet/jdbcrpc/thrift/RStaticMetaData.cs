/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace jdbcrpc.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RStaticMetaData : TBase
  {
    private int _databaseMajorVersion;
    private int _databaseMinorVersion;
    private string _databaseProductName;
    private string _databaseProductVersion;
    private int _defaultTransactionIsolation;
    private string _identifierQuoteString;
    private bool _supportsCatalogsInTableDefinitions;
    private bool _supportsSavepoints;
    private bool _supportsSchemasInDataManipulation;
    private bool _supportsSchemasInTableDefinitions;

    public int DatabaseMajorVersion
    {
      get
      {
        return _databaseMajorVersion;
      }
      set
      {
        __isset.databaseMajorVersion = true;
        this._databaseMajorVersion = value;
      }
    }

    public int DatabaseMinorVersion
    {
      get
      {
        return _databaseMinorVersion;
      }
      set
      {
        __isset.databaseMinorVersion = true;
        this._databaseMinorVersion = value;
      }
    }

    public string DatabaseProductName
    {
      get
      {
        return _databaseProductName;
      }
      set
      {
        __isset.databaseProductName = true;
        this._databaseProductName = value;
      }
    }

    public string DatabaseProductVersion
    {
      get
      {
        return _databaseProductVersion;
      }
      set
      {
        __isset.databaseProductVersion = true;
        this._databaseProductVersion = value;
      }
    }

    public int DefaultTransactionIsolation
    {
      get
      {
        return _defaultTransactionIsolation;
      }
      set
      {
        __isset.defaultTransactionIsolation = true;
        this._defaultTransactionIsolation = value;
      }
    }

    public string IdentifierQuoteString
    {
      get
      {
        return _identifierQuoteString;
      }
      set
      {
        __isset.identifierQuoteString = true;
        this._identifierQuoteString = value;
      }
    }

    public bool SupportsCatalogsInTableDefinitions
    {
      get
      {
        return _supportsCatalogsInTableDefinitions;
      }
      set
      {
        __isset.supportsCatalogsInTableDefinitions = true;
        this._supportsCatalogsInTableDefinitions = value;
      }
    }

    public bool SupportsSavepoints
    {
      get
      {
        return _supportsSavepoints;
      }
      set
      {
        __isset.supportsSavepoints = true;
        this._supportsSavepoints = value;
      }
    }

    public bool SupportsSchemasInDataManipulation
    {
      get
      {
        return _supportsSchemasInDataManipulation;
      }
      set
      {
        __isset.supportsSchemasInDataManipulation = true;
        this._supportsSchemasInDataManipulation = value;
      }
    }

    public bool SupportsSchemasInTableDefinitions
    {
      get
      {
        return _supportsSchemasInTableDefinitions;
      }
      set
      {
        __isset.supportsSchemasInTableDefinitions = true;
        this._supportsSchemasInTableDefinitions = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool databaseMajorVersion;
      public bool databaseMinorVersion;
      public bool databaseProductName;
      public bool databaseProductVersion;
      public bool defaultTransactionIsolation;
      public bool identifierQuoteString;
      public bool supportsCatalogsInTableDefinitions;
      public bool supportsSavepoints;
      public bool supportsSchemasInDataManipulation;
      public bool supportsSchemasInTableDefinitions;
    }

    public RStaticMetaData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DatabaseMajorVersion = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              DatabaseMinorVersion = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              DatabaseProductName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              DatabaseProductVersion = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              DefaultTransactionIsolation = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              IdentifierQuoteString = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              SupportsCatalogsInTableDefinitions = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              SupportsSavepoints = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              SupportsSchemasInDataManipulation = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              SupportsSchemasInTableDefinitions = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RStaticMetaData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.databaseMajorVersion) {
        field.Name = "databaseMajorVersion";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DatabaseMajorVersion);
        oprot.WriteFieldEnd();
      }
      if (__isset.databaseMinorVersion) {
        field.Name = "databaseMinorVersion";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DatabaseMinorVersion);
        oprot.WriteFieldEnd();
      }
      if (DatabaseProductName != null && __isset.databaseProductName) {
        field.Name = "databaseProductName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DatabaseProductName);
        oprot.WriteFieldEnd();
      }
      if (DatabaseProductVersion != null && __isset.databaseProductVersion) {
        field.Name = "databaseProductVersion";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DatabaseProductVersion);
        oprot.WriteFieldEnd();
      }
      if (__isset.defaultTransactionIsolation) {
        field.Name = "defaultTransactionIsolation";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DefaultTransactionIsolation);
        oprot.WriteFieldEnd();
      }
      if (IdentifierQuoteString != null && __isset.identifierQuoteString) {
        field.Name = "identifierQuoteString";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IdentifierQuoteString);
        oprot.WriteFieldEnd();
      }
      if (__isset.supportsCatalogsInTableDefinitions) {
        field.Name = "supportsCatalogsInTableDefinitions";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SupportsCatalogsInTableDefinitions);
        oprot.WriteFieldEnd();
      }
      if (__isset.supportsSavepoints) {
        field.Name = "supportsSavepoints";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SupportsSavepoints);
        oprot.WriteFieldEnd();
      }
      if (__isset.supportsSchemasInDataManipulation) {
        field.Name = "supportsSchemasInDataManipulation";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SupportsSchemasInDataManipulation);
        oprot.WriteFieldEnd();
      }
      if (__isset.supportsSchemasInTableDefinitions) {
        field.Name = "supportsSchemasInTableDefinitions";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SupportsSchemasInTableDefinitions);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RStaticMetaData(");
      bool __first = true;
      if (__isset.databaseMajorVersion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DatabaseMajorVersion: ");
        __sb.Append(DatabaseMajorVersion);
      }
      if (__isset.databaseMinorVersion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DatabaseMinorVersion: ");
        __sb.Append(DatabaseMinorVersion);
      }
      if (DatabaseProductName != null && __isset.databaseProductName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DatabaseProductName: ");
        __sb.Append(DatabaseProductName);
      }
      if (DatabaseProductVersion != null && __isset.databaseProductVersion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DatabaseProductVersion: ");
        __sb.Append(DatabaseProductVersion);
      }
      if (__isset.defaultTransactionIsolation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DefaultTransactionIsolation: ");
        __sb.Append(DefaultTransactionIsolation);
      }
      if (IdentifierQuoteString != null && __isset.identifierQuoteString) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdentifierQuoteString: ");
        __sb.Append(IdentifierQuoteString);
      }
      if (__isset.supportsCatalogsInTableDefinitions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SupportsCatalogsInTableDefinitions: ");
        __sb.Append(SupportsCatalogsInTableDefinitions);
      }
      if (__isset.supportsSavepoints) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SupportsSavepoints: ");
        __sb.Append(SupportsSavepoints);
      }
      if (__isset.supportsSchemasInDataManipulation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SupportsSchemasInDataManipulation: ");
        __sb.Append(SupportsSchemasInDataManipulation);
      }
      if (__isset.supportsSchemasInTableDefinitions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SupportsSchemasInTableDefinitions: ");
        __sb.Append(SupportsSchemasInTableDefinitions);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
