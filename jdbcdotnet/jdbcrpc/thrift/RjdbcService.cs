/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace jdbcrpc.thrift
{
  public partial class RjdbcService {
    public interface Iface {
      RConnection createConnection(string url, Dictionary<string, string> properties);
      #if SILVERLIGHT
      IAsyncResult Begin_createConnection(AsyncCallback callback, object state, string url, Dictionary<string, string> properties);
      RConnection End_createConnection(IAsyncResult asyncResult);
      #endif
      RStatement createStatement(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_createStatement(AsyncCallback callback, object state, RConnection connection);
      RStatement End_createStatement(IAsyncResult asyncResult);
      #endif
      RStatement prepareStatement(RConnection connection, string sql);
      #if SILVERLIGHT
      IAsyncResult Begin_prepareStatement(AsyncCallback callback, object state, RConnection connection, string sql);
      RStatement End_prepareStatement(IAsyncResult asyncResult);
      #endif
      RStatement prepareCall(RConnection connection, string sql);
      #if SILVERLIGHT
      IAsyncResult Begin_prepareCall(AsyncCallback callback, object state, RConnection connection, string sql);
      RStatement End_prepareCall(IAsyncResult asyncResult);
      #endif
      RStaticMetaData connection_getstaticmetadata(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getstaticmetadata(AsyncCallback callback, object state, RConnection connection);
      RStaticMetaData End_connection_getstaticmetadata(IAsyncResult asyncResult);
      #endif
      bool connection_isvalid(RConnection connection, int timeout);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_isvalid(AsyncCallback callback, object state, RConnection connection, int timeout);
      bool End_connection_isvalid(IAsyncResult asyncResult);
      #endif
      void connection_commit(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_commit(AsyncCallback callback, object state, RConnection connection);
      void End_connection_commit(IAsyncResult asyncResult);
      #endif
      void connection_rollback(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_rollback(AsyncCallback callback, object state, RConnection connection);
      void End_connection_rollback(IAsyncResult asyncResult);
      #endif
      void connection_setAutoCommit(RConnection connection, bool autoCommit);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_setAutoCommit(AsyncCallback callback, object state, RConnection connection, bool autoCommit);
      void End_connection_setAutoCommit(IAsyncResult asyncResult);
      #endif
      bool connection_getAutoCommit(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getAutoCommit(AsyncCallback callback, object state, RConnection connection);
      bool End_connection_getAutoCommit(IAsyncResult asyncResult);
      #endif
      void connection_setTransactionIsolation(RConnection connection, int level);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_setTransactionIsolation(AsyncCallback callback, object state, RConnection connection, int level);
      void End_connection_setTransactionIsolation(IAsyncResult asyncResult);
      #endif
      int connection_getTransactionIsolation(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getTransactionIsolation(AsyncCallback callback, object state, RConnection connection);
      int End_connection_getTransactionIsolation(IAsyncResult asyncResult);
      #endif
      void connection_setReadOnly(RConnection connection, bool @readOnly);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_setReadOnly(AsyncCallback callback, object state, RConnection connection, bool @readOnly);
      void End_connection_setReadOnly(IAsyncResult asyncResult);
      #endif
      bool connection_getReadOnly(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getReadOnly(AsyncCallback callback, object state, RConnection connection);
      bool End_connection_getReadOnly(IAsyncResult asyncResult);
      #endif
      void connection_setCatalog(RConnection connection, string catalog);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_setCatalog(AsyncCallback callback, object state, RConnection connection, string catalog);
      void End_connection_setCatalog(IAsyncResult asyncResult);
      #endif
      string connection_getCatalog(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getCatalog(AsyncCallback callback, object state, RConnection connection);
      string End_connection_getCatalog(IAsyncResult asyncResult);
      #endif
      void connection_setSchema(RConnection connection, string schema);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_setSchema(AsyncCallback callback, object state, RConnection connection, string schema);
      void End_connection_setSchema(IAsyncResult asyncResult);
      #endif
      string connection_getSchema(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getSchema(AsyncCallback callback, object state, RConnection connection);
      string End_connection_getSchema(IAsyncResult asyncResult);
      #endif
      string connection_getCatalogSeparator(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getCatalogSeparator(AsyncCallback callback, object state, RConnection connection);
      string End_connection_getCatalogSeparator(IAsyncResult asyncResult);
      #endif
      string connection_getCatalogTerm(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getCatalogTerm(AsyncCallback callback, object state, RConnection connection);
      string End_connection_getCatalogTerm(IAsyncResult asyncResult);
      #endif
      string connection_getSchemaTerm(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getSchemaTerm(AsyncCallback callback, object state, RConnection connection);
      string End_connection_getSchemaTerm(IAsyncResult asyncResult);
      #endif
      RResultSet connection_getCatalogs(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getCatalogs(AsyncCallback callback, object state, RConnection connection);
      RResultSet End_connection_getCatalogs(IAsyncResult asyncResult);
      #endif
      RResultSet connection_getSchemas(RConnection connection, string catalog, string schemaPattern);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getSchemas(AsyncCallback callback, object state, RConnection connection, string catalog, string schemaPattern);
      RResultSet End_connection_getSchemas(IAsyncResult asyncResult);
      #endif
      RResultSet connection_getTables(RConnection connection, string catalog, string schemaPattern, string tableNamePattern, List<string> types);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getTables(AsyncCallback callback, object state, RConnection connection, string catalog, string schemaPattern, string tableNamePattern, List<string> types);
      RResultSet End_connection_getTables(IAsyncResult asyncResult);
      #endif
      RResultSet connection_getColumns(RConnection connection, string catalog, string schemaPattern, string tableNamePattern, string columnNamePattern);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getColumns(AsyncCallback callback, object state, RConnection connection, string catalog, string schemaPattern, string tableNamePattern, string columnNamePattern);
      RResultSet End_connection_getColumns(IAsyncResult asyncResult);
      #endif
      string connection_getSQLKeywords(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getSQLKeywords(AsyncCallback callback, object state, RConnection connection);
      string End_connection_getSQLKeywords(IAsyncResult asyncResult);
      #endif
      RResultSet connection_getTableTypes(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getTableTypes(AsyncCallback callback, object state, RConnection connection);
      RResultSet End_connection_getTableTypes(IAsyncResult asyncResult);
      #endif
      RResultSet connection_getTypeInfo(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_connection_getTypeInfo(AsyncCallback callback, object state, RConnection connection);
      RResultSet End_connection_getTypeInfo(IAsyncResult asyncResult);
      #endif
      void closeConnection(RConnection connection);
      #if SILVERLIGHT
      IAsyncResult Begin_closeConnection(AsyncCallback callback, object state, RConnection connection);
      void End_closeConnection(IAsyncResult asyncResult);
      #endif
      void statement_close(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_close(AsyncCallback callback, object state, RStatement statement);
      void End_statement_close(IAsyncResult asyncResult);
      #endif
      bool statement_execute(RStatement statement, string sql);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_execute(AsyncCallback callback, object state, RStatement statement, string sql);
      bool End_statement_execute(IAsyncResult asyncResult);
      #endif
      RResultSet statement_executeQuery(RStatement statement, string sql);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_executeQuery(AsyncCallback callback, object state, RStatement statement, string sql);
      RResultSet End_statement_executeQuery(IAsyncResult asyncResult);
      #endif
      int statement_executeUpdate(RStatement statement, string sql);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_executeUpdate(AsyncCallback callback, object state, RStatement statement, string sql);
      int End_statement_executeUpdate(IAsyncResult asyncResult);
      #endif
      RResultSet statement_getResultSet(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_getResultSet(AsyncCallback callback, object state, RStatement statement);
      RResultSet End_statement_getResultSet(IAsyncResult asyncResult);
      #endif
      int statement_getUpdateCount(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_getUpdateCount(AsyncCallback callback, object state, RStatement statement);
      int End_statement_getUpdateCount(IAsyncResult asyncResult);
      #endif
      int statement_getResultSetType(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_getResultSetType(AsyncCallback callback, object state, RStatement statement);
      int End_statement_getResultSetType(IAsyncResult asyncResult);
      #endif
      void statement_cancel(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_cancel(AsyncCallback callback, object state, RStatement statement);
      void End_statement_cancel(IAsyncResult asyncResult);
      #endif
      void statement_addBatch(RStatement statement, string sql);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_addBatch(AsyncCallback callback, object state, RStatement statement, string sql);
      void End_statement_addBatch(IAsyncResult asyncResult);
      #endif
      void statement_addBatches(RStatement statement, List<string> sqlList);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_addBatches(AsyncCallback callback, object state, RStatement statement, List<string> sqlList);
      void End_statement_addBatches(IAsyncResult asyncResult);
      #endif
      void statement_clearBatch(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_clearBatch(AsyncCallback callback, object state, RStatement statement);
      void End_statement_clearBatch(IAsyncResult asyncResult);
      #endif
      List<int> statement_executeBatch(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_executeBatch(AsyncCallback callback, object state, RStatement statement);
      List<int> End_statement_executeBatch(IAsyncResult asyncResult);
      #endif
      bool preparedstatement_execute(RStatement preparedstatement);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_execute(AsyncCallback callback, object state, RStatement preparedstatement);
      bool End_preparedstatement_execute(IAsyncResult asyncResult);
      #endif
      RResultSet preparedstatement_executeQuery(RStatement preparedstatement);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_executeQuery(AsyncCallback callback, object state, RStatement preparedstatement);
      RResultSet End_preparedstatement_executeQuery(IAsyncResult asyncResult);
      #endif
      int preparedstatement_executeUpdate(RStatement preparedstatement);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_executeUpdate(AsyncCallback callback, object state, RStatement preparedstatement);
      int End_preparedstatement_executeUpdate(IAsyncResult asyncResult);
      #endif
      bool preparedstatement_setParametersThenExecute(RStatement preparedstatement, List<RValueSQL> parameters);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_setParametersThenExecute(AsyncCallback callback, object state, RStatement preparedstatement, List<RValueSQL> parameters);
      bool End_preparedstatement_setParametersThenExecute(IAsyncResult asyncResult);
      #endif
      RResultSet preparedstatement_setParametersThenExecuteQuery(RStatement preparedstatement, List<RValueSQL> parameters);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_setParametersThenExecuteQuery(AsyncCallback callback, object state, RStatement preparedstatement, List<RValueSQL> parameters);
      RResultSet End_preparedstatement_setParametersThenExecuteQuery(IAsyncResult asyncResult);
      #endif
      int preparedstatement_setParametersThenExecuteUpdate(RStatement preparedstatement, List<RValueSQL> parameters);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_setParametersThenExecuteUpdate(AsyncCallback callback, object state, RStatement preparedstatement, List<RValueSQL> parameters);
      int End_preparedstatement_setParametersThenExecuteUpdate(IAsyncResult asyncResult);
      #endif
      void preparedstatement_setParameters(RStatement preparedStatement, List<RValueSQL> parameters);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_setParameters(AsyncCallback callback, object state, RStatement preparedStatement, List<RValueSQL> parameters);
      void End_preparedstatement_setParameters(IAsyncResult asyncResult);
      #endif
      void preparedstatement_setParameter(RStatement preparedStatement, RValueSQL parameter, int position);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_setParameter(AsyncCallback callback, object state, RStatement preparedStatement, RValueSQL parameter, int position);
      void End_preparedstatement_setParameter(IAsyncResult asyncResult);
      #endif
      void preparedstatement_clearParameters(RStatement preparedStatement);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_clearParameters(AsyncCallback callback, object state, RStatement preparedStatement);
      void End_preparedstatement_clearParameters(IAsyncResult asyncResult);
      #endif
      void preparedstatement_addBatchWithParameters(RStatement preparedStatement, List<RValueSQL> parameters);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_addBatchWithParameters(AsyncCallback callback, object state, RStatement preparedStatement, List<RValueSQL> parameters);
      void End_preparedstatement_addBatchWithParameters(IAsyncResult asyncResult);
      #endif
      void preparedstatement_addBatch(RStatement preparedStatement);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_addBatch(AsyncCallback callback, object state, RStatement preparedStatement);
      void End_preparedstatement_addBatch(IAsyncResult asyncResult);
      #endif
      List<int> preparedstatement_executeBatch(RStatement statement, List<List<RValueSQL>> parameters);
      #if SILVERLIGHT
      IAsyncResult Begin_preparedstatement_executeBatch(AsyncCallback callback, object state, RStatement statement, List<List<RValueSQL>> parameters);
      List<int> End_preparedstatement_executeBatch(IAsyncResult asyncResult);
      #endif
      statement_getWarnings_return statement_getWarnings(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_getWarnings(AsyncCallback callback, object state, RStatement statement);
      statement_getWarnings_return End_statement_getWarnings(IAsyncResult asyncResult);
      #endif
      void statement_clearWarnings(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_clearWarnings(AsyncCallback callback, object state, RStatement statement);
      void End_statement_clearWarnings(IAsyncResult asyncResult);
      #endif
      int statement_getMaxRows(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_getMaxRows(AsyncCallback callback, object state, RStatement statement);
      int End_statement_getMaxRows(IAsyncResult asyncResult);
      #endif
      void statement_setMaxRows(RStatement statement, int max);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_setMaxRows(AsyncCallback callback, object state, RStatement statement, int max);
      void End_statement_setMaxRows(IAsyncResult asyncResult);
      #endif
      int statement_getQueryTimeout(RStatement statement);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_getQueryTimeout(AsyncCallback callback, object state, RStatement statement);
      int End_statement_getQueryTimeout(IAsyncResult asyncResult);
      #endif
      void statement_setQueryTimeout(RStatement statement, int seconds);
      #if SILVERLIGHT
      IAsyncResult Begin_statement_setQueryTimeout(AsyncCallback callback, object state, RStatement statement, int seconds);
      void End_statement_setQueryTimeout(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_createConnection(AsyncCallback callback, object state, string url, Dictionary<string, string> properties)
      {
        return send_createConnection(callback, state, url, properties);
      }

      public RConnection End_createConnection(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createConnection();
      }

      #endif

      public RConnection createConnection(string url, Dictionary<string, string> properties)
      {
        #if !SILVERLIGHT
        send_createConnection(url, properties);
        return recv_createConnection();

        #else
        var asyncResult = Begin_createConnection(null, null, url, properties);
        return End_createConnection(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createConnection(AsyncCallback callback, object state, string url, Dictionary<string, string> properties)
      #else
      public void send_createConnection(string url, Dictionary<string, string> properties)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createConnection", TMessageType.Call, seqid_));
        createConnection_args args = new createConnection_args();
        args.Url = url;
        args.Properties = properties;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RConnection recv_createConnection()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createConnection_result result = new createConnection_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createConnection failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_createStatement(AsyncCallback callback, object state, RConnection connection)
      {
        return send_createStatement(callback, state, connection);
      }

      public RStatement End_createStatement(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_createStatement();
      }

      #endif

      public RStatement createStatement(RConnection connection)
      {
        #if !SILVERLIGHT
        send_createStatement(connection);
        return recv_createStatement();

        #else
        var asyncResult = Begin_createStatement(null, null, connection);
        return End_createStatement(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_createStatement(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_createStatement(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("createStatement", TMessageType.Call, seqid_));
        createStatement_args args = new createStatement_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RStatement recv_createStatement()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        createStatement_result result = new createStatement_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createStatement failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_prepareStatement(AsyncCallback callback, object state, RConnection connection, string sql)
      {
        return send_prepareStatement(callback, state, connection, sql);
      }

      public RStatement End_prepareStatement(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_prepareStatement();
      }

      #endif

      public RStatement prepareStatement(RConnection connection, string sql)
      {
        #if !SILVERLIGHT
        send_prepareStatement(connection, sql);
        return recv_prepareStatement();

        #else
        var asyncResult = Begin_prepareStatement(null, null, connection, sql);
        return End_prepareStatement(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_prepareStatement(AsyncCallback callback, object state, RConnection connection, string sql)
      #else
      public void send_prepareStatement(RConnection connection, string sql)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("prepareStatement", TMessageType.Call, seqid_));
        prepareStatement_args args = new prepareStatement_args();
        args.Connection = connection;
        args.Sql = sql;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RStatement recv_prepareStatement()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        prepareStatement_result result = new prepareStatement_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "prepareStatement failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_prepareCall(AsyncCallback callback, object state, RConnection connection, string sql)
      {
        return send_prepareCall(callback, state, connection, sql);
      }

      public RStatement End_prepareCall(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_prepareCall();
      }

      #endif

      public RStatement prepareCall(RConnection connection, string sql)
      {
        #if !SILVERLIGHT
        send_prepareCall(connection, sql);
        return recv_prepareCall();

        #else
        var asyncResult = Begin_prepareCall(null, null, connection, sql);
        return End_prepareCall(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_prepareCall(AsyncCallback callback, object state, RConnection connection, string sql)
      #else
      public void send_prepareCall(RConnection connection, string sql)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("prepareCall", TMessageType.Call, seqid_));
        prepareCall_args args = new prepareCall_args();
        args.Connection = connection;
        args.Sql = sql;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RStatement recv_prepareCall()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        prepareCall_result result = new prepareCall_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "prepareCall failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getstaticmetadata(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getstaticmetadata(callback, state, connection);
      }

      public RStaticMetaData End_connection_getstaticmetadata(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getstaticmetadata();
      }

      #endif

      public RStaticMetaData connection_getstaticmetadata(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getstaticmetadata(connection);
        return recv_connection_getstaticmetadata();

        #else
        var asyncResult = Begin_connection_getstaticmetadata(null, null, connection);
        return End_connection_getstaticmetadata(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getstaticmetadata(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getstaticmetadata(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getstaticmetadata", TMessageType.Call, seqid_));
        connection_getstaticmetadata_args args = new connection_getstaticmetadata_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RStaticMetaData recv_connection_getstaticmetadata()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getstaticmetadata_result result = new connection_getstaticmetadata_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getstaticmetadata failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_isvalid(AsyncCallback callback, object state, RConnection connection, int timeout)
      {
        return send_connection_isvalid(callback, state, connection, timeout);
      }

      public bool End_connection_isvalid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_isvalid();
      }

      #endif

      public bool connection_isvalid(RConnection connection, int timeout)
      {
        #if !SILVERLIGHT
        send_connection_isvalid(connection, timeout);
        return recv_connection_isvalid();

        #else
        var asyncResult = Begin_connection_isvalid(null, null, connection, timeout);
        return End_connection_isvalid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_isvalid(AsyncCallback callback, object state, RConnection connection, int timeout)
      #else
      public void send_connection_isvalid(RConnection connection, int timeout)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_isvalid", TMessageType.Call, seqid_));
        connection_isvalid_args args = new connection_isvalid_args();
        args.Connection = connection;
        args.Timeout = timeout;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_connection_isvalid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_isvalid_result result = new connection_isvalid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_isvalid failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_commit(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_commit(callback, state, connection);
      }

      public void End_connection_commit(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_connection_commit();
      }

      #endif

      public void connection_commit(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_commit(connection);
        recv_connection_commit();

        #else
        var asyncResult = Begin_connection_commit(null, null, connection);
        End_connection_commit(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_commit(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_commit(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_commit", TMessageType.Call, seqid_));
        connection_commit_args args = new connection_commit_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_connection_commit()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_commit_result result = new connection_commit_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_rollback(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_rollback(callback, state, connection);
      }

      public void End_connection_rollback(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_connection_rollback();
      }

      #endif

      public void connection_rollback(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_rollback(connection);
        recv_connection_rollback();

        #else
        var asyncResult = Begin_connection_rollback(null, null, connection);
        End_connection_rollback(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_rollback(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_rollback(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_rollback", TMessageType.Call, seqid_));
        connection_rollback_args args = new connection_rollback_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_connection_rollback()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_rollback_result result = new connection_rollback_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_setAutoCommit(AsyncCallback callback, object state, RConnection connection, bool autoCommit)
      {
        return send_connection_setAutoCommit(callback, state, connection, autoCommit);
      }

      public void End_connection_setAutoCommit(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_connection_setAutoCommit();
      }

      #endif

      public void connection_setAutoCommit(RConnection connection, bool autoCommit)
      {
        #if !SILVERLIGHT
        send_connection_setAutoCommit(connection, autoCommit);
        recv_connection_setAutoCommit();

        #else
        var asyncResult = Begin_connection_setAutoCommit(null, null, connection, autoCommit);
        End_connection_setAutoCommit(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_setAutoCommit(AsyncCallback callback, object state, RConnection connection, bool autoCommit)
      #else
      public void send_connection_setAutoCommit(RConnection connection, bool autoCommit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_setAutoCommit", TMessageType.Call, seqid_));
        connection_setAutoCommit_args args = new connection_setAutoCommit_args();
        args.Connection = connection;
        args.AutoCommit = autoCommit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_connection_setAutoCommit()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_setAutoCommit_result result = new connection_setAutoCommit_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getAutoCommit(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getAutoCommit(callback, state, connection);
      }

      public bool End_connection_getAutoCommit(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getAutoCommit();
      }

      #endif

      public bool connection_getAutoCommit(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getAutoCommit(connection);
        return recv_connection_getAutoCommit();

        #else
        var asyncResult = Begin_connection_getAutoCommit(null, null, connection);
        return End_connection_getAutoCommit(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getAutoCommit(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getAutoCommit(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getAutoCommit", TMessageType.Call, seqid_));
        connection_getAutoCommit_args args = new connection_getAutoCommit_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_connection_getAutoCommit()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getAutoCommit_result result = new connection_getAutoCommit_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getAutoCommit failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_setTransactionIsolation(AsyncCallback callback, object state, RConnection connection, int level)
      {
        return send_connection_setTransactionIsolation(callback, state, connection, level);
      }

      public void End_connection_setTransactionIsolation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_connection_setTransactionIsolation();
      }

      #endif

      public void connection_setTransactionIsolation(RConnection connection, int level)
      {
        #if !SILVERLIGHT
        send_connection_setTransactionIsolation(connection, level);
        recv_connection_setTransactionIsolation();

        #else
        var asyncResult = Begin_connection_setTransactionIsolation(null, null, connection, level);
        End_connection_setTransactionIsolation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_setTransactionIsolation(AsyncCallback callback, object state, RConnection connection, int level)
      #else
      public void send_connection_setTransactionIsolation(RConnection connection, int level)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_setTransactionIsolation", TMessageType.Call, seqid_));
        connection_setTransactionIsolation_args args = new connection_setTransactionIsolation_args();
        args.Connection = connection;
        args.Level = level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_connection_setTransactionIsolation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_setTransactionIsolation_result result = new connection_setTransactionIsolation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getTransactionIsolation(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getTransactionIsolation(callback, state, connection);
      }

      public int End_connection_getTransactionIsolation(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getTransactionIsolation();
      }

      #endif

      public int connection_getTransactionIsolation(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getTransactionIsolation(connection);
        return recv_connection_getTransactionIsolation();

        #else
        var asyncResult = Begin_connection_getTransactionIsolation(null, null, connection);
        return End_connection_getTransactionIsolation(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getTransactionIsolation(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getTransactionIsolation(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getTransactionIsolation", TMessageType.Call, seqid_));
        connection_getTransactionIsolation_args args = new connection_getTransactionIsolation_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_connection_getTransactionIsolation()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getTransactionIsolation_result result = new connection_getTransactionIsolation_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getTransactionIsolation failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_setReadOnly(AsyncCallback callback, object state, RConnection connection, bool @readOnly)
      {
        return send_connection_setReadOnly(callback, state, connection, @readOnly);
      }

      public void End_connection_setReadOnly(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_connection_setReadOnly();
      }

      #endif

      public void connection_setReadOnly(RConnection connection, bool @readOnly)
      {
        #if !SILVERLIGHT
        send_connection_setReadOnly(connection, @readOnly);
        recv_connection_setReadOnly();

        #else
        var asyncResult = Begin_connection_setReadOnly(null, null, connection, @readOnly);
        End_connection_setReadOnly(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_setReadOnly(AsyncCallback callback, object state, RConnection connection, bool @readOnly)
      #else
      public void send_connection_setReadOnly(RConnection connection, bool @readOnly)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_setReadOnly", TMessageType.Call, seqid_));
        connection_setReadOnly_args args = new connection_setReadOnly_args();
        args.Connection = connection;
        args.ReadOnly = @readOnly;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_connection_setReadOnly()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_setReadOnly_result result = new connection_setReadOnly_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getReadOnly(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getReadOnly(callback, state, connection);
      }

      public bool End_connection_getReadOnly(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getReadOnly();
      }

      #endif

      public bool connection_getReadOnly(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getReadOnly(connection);
        return recv_connection_getReadOnly();

        #else
        var asyncResult = Begin_connection_getReadOnly(null, null, connection);
        return End_connection_getReadOnly(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getReadOnly(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getReadOnly(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getReadOnly", TMessageType.Call, seqid_));
        connection_getReadOnly_args args = new connection_getReadOnly_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_connection_getReadOnly()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getReadOnly_result result = new connection_getReadOnly_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getReadOnly failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_setCatalog(AsyncCallback callback, object state, RConnection connection, string catalog)
      {
        return send_connection_setCatalog(callback, state, connection, catalog);
      }

      public void End_connection_setCatalog(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_connection_setCatalog();
      }

      #endif

      public void connection_setCatalog(RConnection connection, string catalog)
      {
        #if !SILVERLIGHT
        send_connection_setCatalog(connection, catalog);
        recv_connection_setCatalog();

        #else
        var asyncResult = Begin_connection_setCatalog(null, null, connection, catalog);
        End_connection_setCatalog(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_setCatalog(AsyncCallback callback, object state, RConnection connection, string catalog)
      #else
      public void send_connection_setCatalog(RConnection connection, string catalog)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_setCatalog", TMessageType.Call, seqid_));
        connection_setCatalog_args args = new connection_setCatalog_args();
        args.Connection = connection;
        args.Catalog = catalog;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_connection_setCatalog()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_setCatalog_result result = new connection_setCatalog_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getCatalog(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getCatalog(callback, state, connection);
      }

      public string End_connection_getCatalog(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getCatalog();
      }

      #endif

      public string connection_getCatalog(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getCatalog(connection);
        return recv_connection_getCatalog();

        #else
        var asyncResult = Begin_connection_getCatalog(null, null, connection);
        return End_connection_getCatalog(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getCatalog(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getCatalog(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getCatalog", TMessageType.Call, seqid_));
        connection_getCatalog_args args = new connection_getCatalog_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_connection_getCatalog()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getCatalog_result result = new connection_getCatalog_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getCatalog failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_setSchema(AsyncCallback callback, object state, RConnection connection, string schema)
      {
        return send_connection_setSchema(callback, state, connection, schema);
      }

      public void End_connection_setSchema(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_connection_setSchema();
      }

      #endif

      public void connection_setSchema(RConnection connection, string schema)
      {
        #if !SILVERLIGHT
        send_connection_setSchema(connection, schema);
        recv_connection_setSchema();

        #else
        var asyncResult = Begin_connection_setSchema(null, null, connection, schema);
        End_connection_setSchema(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_setSchema(AsyncCallback callback, object state, RConnection connection, string schema)
      #else
      public void send_connection_setSchema(RConnection connection, string schema)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_setSchema", TMessageType.Call, seqid_));
        connection_setSchema_args args = new connection_setSchema_args();
        args.Connection = connection;
        args.Schema = schema;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_connection_setSchema()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_setSchema_result result = new connection_setSchema_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getSchema(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getSchema(callback, state, connection);
      }

      public string End_connection_getSchema(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getSchema();
      }

      #endif

      public string connection_getSchema(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getSchema(connection);
        return recv_connection_getSchema();

        #else
        var asyncResult = Begin_connection_getSchema(null, null, connection);
        return End_connection_getSchema(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getSchema(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getSchema(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getSchema", TMessageType.Call, seqid_));
        connection_getSchema_args args = new connection_getSchema_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_connection_getSchema()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getSchema_result result = new connection_getSchema_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getSchema failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getCatalogSeparator(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getCatalogSeparator(callback, state, connection);
      }

      public string End_connection_getCatalogSeparator(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getCatalogSeparator();
      }

      #endif

      public string connection_getCatalogSeparator(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getCatalogSeparator(connection);
        return recv_connection_getCatalogSeparator();

        #else
        var asyncResult = Begin_connection_getCatalogSeparator(null, null, connection);
        return End_connection_getCatalogSeparator(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getCatalogSeparator(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getCatalogSeparator(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getCatalogSeparator", TMessageType.Call, seqid_));
        connection_getCatalogSeparator_args args = new connection_getCatalogSeparator_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_connection_getCatalogSeparator()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getCatalogSeparator_result result = new connection_getCatalogSeparator_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getCatalogSeparator failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getCatalogTerm(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getCatalogTerm(callback, state, connection);
      }

      public string End_connection_getCatalogTerm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getCatalogTerm();
      }

      #endif

      public string connection_getCatalogTerm(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getCatalogTerm(connection);
        return recv_connection_getCatalogTerm();

        #else
        var asyncResult = Begin_connection_getCatalogTerm(null, null, connection);
        return End_connection_getCatalogTerm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getCatalogTerm(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getCatalogTerm(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getCatalogTerm", TMessageType.Call, seqid_));
        connection_getCatalogTerm_args args = new connection_getCatalogTerm_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_connection_getCatalogTerm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getCatalogTerm_result result = new connection_getCatalogTerm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getCatalogTerm failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getSchemaTerm(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getSchemaTerm(callback, state, connection);
      }

      public string End_connection_getSchemaTerm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getSchemaTerm();
      }

      #endif

      public string connection_getSchemaTerm(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getSchemaTerm(connection);
        return recv_connection_getSchemaTerm();

        #else
        var asyncResult = Begin_connection_getSchemaTerm(null, null, connection);
        return End_connection_getSchemaTerm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getSchemaTerm(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getSchemaTerm(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getSchemaTerm", TMessageType.Call, seqid_));
        connection_getSchemaTerm_args args = new connection_getSchemaTerm_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_connection_getSchemaTerm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getSchemaTerm_result result = new connection_getSchemaTerm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getSchemaTerm failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getCatalogs(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getCatalogs(callback, state, connection);
      }

      public RResultSet End_connection_getCatalogs(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getCatalogs();
      }

      #endif

      public RResultSet connection_getCatalogs(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getCatalogs(connection);
        return recv_connection_getCatalogs();

        #else
        var asyncResult = Begin_connection_getCatalogs(null, null, connection);
        return End_connection_getCatalogs(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getCatalogs(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getCatalogs(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getCatalogs", TMessageType.Call, seqid_));
        connection_getCatalogs_args args = new connection_getCatalogs_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_connection_getCatalogs()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getCatalogs_result result = new connection_getCatalogs_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getCatalogs failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getSchemas(AsyncCallback callback, object state, RConnection connection, string catalog, string schemaPattern)
      {
        return send_connection_getSchemas(callback, state, connection, catalog, schemaPattern);
      }

      public RResultSet End_connection_getSchemas(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getSchemas();
      }

      #endif

      public RResultSet connection_getSchemas(RConnection connection, string catalog, string schemaPattern)
      {
        #if !SILVERLIGHT
        send_connection_getSchemas(connection, catalog, schemaPattern);
        return recv_connection_getSchemas();

        #else
        var asyncResult = Begin_connection_getSchemas(null, null, connection, catalog, schemaPattern);
        return End_connection_getSchemas(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getSchemas(AsyncCallback callback, object state, RConnection connection, string catalog, string schemaPattern)
      #else
      public void send_connection_getSchemas(RConnection connection, string catalog, string schemaPattern)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getSchemas", TMessageType.Call, seqid_));
        connection_getSchemas_args args = new connection_getSchemas_args();
        args.Connection = connection;
        args.Catalog = catalog;
        args.SchemaPattern = schemaPattern;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_connection_getSchemas()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getSchemas_result result = new connection_getSchemas_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getSchemas failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getTables(AsyncCallback callback, object state, RConnection connection, string catalog, string schemaPattern, string tableNamePattern, List<string> types)
      {
        return send_connection_getTables(callback, state, connection, catalog, schemaPattern, tableNamePattern, types);
      }

      public RResultSet End_connection_getTables(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getTables();
      }

      #endif

      public RResultSet connection_getTables(RConnection connection, string catalog, string schemaPattern, string tableNamePattern, List<string> types)
      {
        #if !SILVERLIGHT
        send_connection_getTables(connection, catalog, schemaPattern, tableNamePattern, types);
        return recv_connection_getTables();

        #else
        var asyncResult = Begin_connection_getTables(null, null, connection, catalog, schemaPattern, tableNamePattern, types);
        return End_connection_getTables(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getTables(AsyncCallback callback, object state, RConnection connection, string catalog, string schemaPattern, string tableNamePattern, List<string> types)
      #else
      public void send_connection_getTables(RConnection connection, string catalog, string schemaPattern, string tableNamePattern, List<string> types)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getTables", TMessageType.Call, seqid_));
        connection_getTables_args args = new connection_getTables_args();
        args.Connection = connection;
        args.Catalog = catalog;
        args.SchemaPattern = schemaPattern;
        args.TableNamePattern = tableNamePattern;
        args.Types = types;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_connection_getTables()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getTables_result result = new connection_getTables_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getTables failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getColumns(AsyncCallback callback, object state, RConnection connection, string catalog, string schemaPattern, string tableNamePattern, string columnNamePattern)
      {
        return send_connection_getColumns(callback, state, connection, catalog, schemaPattern, tableNamePattern, columnNamePattern);
      }

      public RResultSet End_connection_getColumns(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getColumns();
      }

      #endif

      public RResultSet connection_getColumns(RConnection connection, string catalog, string schemaPattern, string tableNamePattern, string columnNamePattern)
      {
        #if !SILVERLIGHT
        send_connection_getColumns(connection, catalog, schemaPattern, tableNamePattern, columnNamePattern);
        return recv_connection_getColumns();

        #else
        var asyncResult = Begin_connection_getColumns(null, null, connection, catalog, schemaPattern, tableNamePattern, columnNamePattern);
        return End_connection_getColumns(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getColumns(AsyncCallback callback, object state, RConnection connection, string catalog, string schemaPattern, string tableNamePattern, string columnNamePattern)
      #else
      public void send_connection_getColumns(RConnection connection, string catalog, string schemaPattern, string tableNamePattern, string columnNamePattern)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getColumns", TMessageType.Call, seqid_));
        connection_getColumns_args args = new connection_getColumns_args();
        args.Connection = connection;
        args.Catalog = catalog;
        args.SchemaPattern = schemaPattern;
        args.TableNamePattern = tableNamePattern;
        args.ColumnNamePattern = columnNamePattern;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_connection_getColumns()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getColumns_result result = new connection_getColumns_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getColumns failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getSQLKeywords(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getSQLKeywords(callback, state, connection);
      }

      public string End_connection_getSQLKeywords(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getSQLKeywords();
      }

      #endif

      public string connection_getSQLKeywords(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getSQLKeywords(connection);
        return recv_connection_getSQLKeywords();

        #else
        var asyncResult = Begin_connection_getSQLKeywords(null, null, connection);
        return End_connection_getSQLKeywords(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getSQLKeywords(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getSQLKeywords(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getSQLKeywords", TMessageType.Call, seqid_));
        connection_getSQLKeywords_args args = new connection_getSQLKeywords_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_connection_getSQLKeywords()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getSQLKeywords_result result = new connection_getSQLKeywords_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getSQLKeywords failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getTableTypes(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getTableTypes(callback, state, connection);
      }

      public RResultSet End_connection_getTableTypes(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getTableTypes();
      }

      #endif

      public RResultSet connection_getTableTypes(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getTableTypes(connection);
        return recv_connection_getTableTypes();

        #else
        var asyncResult = Begin_connection_getTableTypes(null, null, connection);
        return End_connection_getTableTypes(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getTableTypes(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getTableTypes(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getTableTypes", TMessageType.Call, seqid_));
        connection_getTableTypes_args args = new connection_getTableTypes_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_connection_getTableTypes()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getTableTypes_result result = new connection_getTableTypes_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getTableTypes failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_connection_getTypeInfo(AsyncCallback callback, object state, RConnection connection)
      {
        return send_connection_getTypeInfo(callback, state, connection);
      }

      public RResultSet End_connection_getTypeInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connection_getTypeInfo();
      }

      #endif

      public RResultSet connection_getTypeInfo(RConnection connection)
      {
        #if !SILVERLIGHT
        send_connection_getTypeInfo(connection);
        return recv_connection_getTypeInfo();

        #else
        var asyncResult = Begin_connection_getTypeInfo(null, null, connection);
        return End_connection_getTypeInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connection_getTypeInfo(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_connection_getTypeInfo(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("connection_getTypeInfo", TMessageType.Call, seqid_));
        connection_getTypeInfo_args args = new connection_getTypeInfo_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_connection_getTypeInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connection_getTypeInfo_result result = new connection_getTypeInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connection_getTypeInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_closeConnection(AsyncCallback callback, object state, RConnection connection)
      {
        return send_closeConnection(callback, state, connection);
      }

      public void End_closeConnection(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_closeConnection();
      }

      #endif

      public void closeConnection(RConnection connection)
      {
        #if !SILVERLIGHT
        send_closeConnection(connection);
        recv_closeConnection();

        #else
        var asyncResult = Begin_closeConnection(null, null, connection);
        End_closeConnection(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_closeConnection(AsyncCallback callback, object state, RConnection connection)
      #else
      public void send_closeConnection(RConnection connection)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("closeConnection", TMessageType.Call, seqid_));
        closeConnection_args args = new closeConnection_args();
        args.Connection = connection;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_closeConnection()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        closeConnection_result result = new closeConnection_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_close(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_close(callback, state, statement);
      }

      public void End_statement_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_statement_close();
      }

      #endif

      public void statement_close(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_close(statement);
        recv_statement_close();

        #else
        var asyncResult = Begin_statement_close(null, null, statement);
        End_statement_close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_close(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_close(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_close", TMessageType.Call, seqid_));
        statement_close_args args = new statement_close_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_statement_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_close_result result = new statement_close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_execute(AsyncCallback callback, object state, RStatement statement, string sql)
      {
        return send_statement_execute(callback, state, statement, sql);
      }

      public bool End_statement_execute(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_execute();
      }

      #endif

      public bool statement_execute(RStatement statement, string sql)
      {
        #if !SILVERLIGHT
        send_statement_execute(statement, sql);
        return recv_statement_execute();

        #else
        var asyncResult = Begin_statement_execute(null, null, statement, sql);
        return End_statement_execute(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_execute(AsyncCallback callback, object state, RStatement statement, string sql)
      #else
      public void send_statement_execute(RStatement statement, string sql)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_execute", TMessageType.Call, seqid_));
        statement_execute_args args = new statement_execute_args();
        args.Statement = statement;
        args.Sql = sql;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_statement_execute()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_execute_result result = new statement_execute_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_execute failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_executeQuery(AsyncCallback callback, object state, RStatement statement, string sql)
      {
        return send_statement_executeQuery(callback, state, statement, sql);
      }

      public RResultSet End_statement_executeQuery(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_executeQuery();
      }

      #endif

      public RResultSet statement_executeQuery(RStatement statement, string sql)
      {
        #if !SILVERLIGHT
        send_statement_executeQuery(statement, sql);
        return recv_statement_executeQuery();

        #else
        var asyncResult = Begin_statement_executeQuery(null, null, statement, sql);
        return End_statement_executeQuery(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_executeQuery(AsyncCallback callback, object state, RStatement statement, string sql)
      #else
      public void send_statement_executeQuery(RStatement statement, string sql)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_executeQuery", TMessageType.Call, seqid_));
        statement_executeQuery_args args = new statement_executeQuery_args();
        args.Statement = statement;
        args.Sql = sql;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_statement_executeQuery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_executeQuery_result result = new statement_executeQuery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_executeQuery failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_executeUpdate(AsyncCallback callback, object state, RStatement statement, string sql)
      {
        return send_statement_executeUpdate(callback, state, statement, sql);
      }

      public int End_statement_executeUpdate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_executeUpdate();
      }

      #endif

      public int statement_executeUpdate(RStatement statement, string sql)
      {
        #if !SILVERLIGHT
        send_statement_executeUpdate(statement, sql);
        return recv_statement_executeUpdate();

        #else
        var asyncResult = Begin_statement_executeUpdate(null, null, statement, sql);
        return End_statement_executeUpdate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_executeUpdate(AsyncCallback callback, object state, RStatement statement, string sql)
      #else
      public void send_statement_executeUpdate(RStatement statement, string sql)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_executeUpdate", TMessageType.Call, seqid_));
        statement_executeUpdate_args args = new statement_executeUpdate_args();
        args.Statement = statement;
        args.Sql = sql;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_statement_executeUpdate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_executeUpdate_result result = new statement_executeUpdate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_executeUpdate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_getResultSet(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_getResultSet(callback, state, statement);
      }

      public RResultSet End_statement_getResultSet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_getResultSet();
      }

      #endif

      public RResultSet statement_getResultSet(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_getResultSet(statement);
        return recv_statement_getResultSet();

        #else
        var asyncResult = Begin_statement_getResultSet(null, null, statement);
        return End_statement_getResultSet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_getResultSet(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_getResultSet(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_getResultSet", TMessageType.Call, seqid_));
        statement_getResultSet_args args = new statement_getResultSet_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_statement_getResultSet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_getResultSet_result result = new statement_getResultSet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_getResultSet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_getUpdateCount(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_getUpdateCount(callback, state, statement);
      }

      public int End_statement_getUpdateCount(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_getUpdateCount();
      }

      #endif

      public int statement_getUpdateCount(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_getUpdateCount(statement);
        return recv_statement_getUpdateCount();

        #else
        var asyncResult = Begin_statement_getUpdateCount(null, null, statement);
        return End_statement_getUpdateCount(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_getUpdateCount(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_getUpdateCount(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_getUpdateCount", TMessageType.Call, seqid_));
        statement_getUpdateCount_args args = new statement_getUpdateCount_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_statement_getUpdateCount()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_getUpdateCount_result result = new statement_getUpdateCount_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_getUpdateCount failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_getResultSetType(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_getResultSetType(callback, state, statement);
      }

      public int End_statement_getResultSetType(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_getResultSetType();
      }

      #endif

      public int statement_getResultSetType(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_getResultSetType(statement);
        return recv_statement_getResultSetType();

        #else
        var asyncResult = Begin_statement_getResultSetType(null, null, statement);
        return End_statement_getResultSetType(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_getResultSetType(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_getResultSetType(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_getResultSetType", TMessageType.Call, seqid_));
        statement_getResultSetType_args args = new statement_getResultSetType_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_statement_getResultSetType()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_getResultSetType_result result = new statement_getResultSetType_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_getResultSetType failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_cancel(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_cancel(callback, state, statement);
      }

      public void End_statement_cancel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_statement_cancel();
      }

      #endif

      public void statement_cancel(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_cancel(statement);
        recv_statement_cancel();

        #else
        var asyncResult = Begin_statement_cancel(null, null, statement);
        End_statement_cancel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_cancel(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_cancel(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_cancel", TMessageType.Call, seqid_));
        statement_cancel_args args = new statement_cancel_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_statement_cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_cancel_result result = new statement_cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_addBatch(AsyncCallback callback, object state, RStatement statement, string sql)
      {
        return send_statement_addBatch(callback, state, statement, sql);
      }

      public void End_statement_addBatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_statement_addBatch();
      }

      #endif

      public void statement_addBatch(RStatement statement, string sql)
      {
        #if !SILVERLIGHT
        send_statement_addBatch(statement, sql);
        recv_statement_addBatch();

        #else
        var asyncResult = Begin_statement_addBatch(null, null, statement, sql);
        End_statement_addBatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_addBatch(AsyncCallback callback, object state, RStatement statement, string sql)
      #else
      public void send_statement_addBatch(RStatement statement, string sql)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_addBatch", TMessageType.Call, seqid_));
        statement_addBatch_args args = new statement_addBatch_args();
        args.Statement = statement;
        args.Sql = sql;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_statement_addBatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_addBatch_result result = new statement_addBatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_addBatches(AsyncCallback callback, object state, RStatement statement, List<string> sqlList)
      {
        return send_statement_addBatches(callback, state, statement, sqlList);
      }

      public void End_statement_addBatches(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_statement_addBatches();
      }

      #endif

      public void statement_addBatches(RStatement statement, List<string> sqlList)
      {
        #if !SILVERLIGHT
        send_statement_addBatches(statement, sqlList);
        recv_statement_addBatches();

        #else
        var asyncResult = Begin_statement_addBatches(null, null, statement, sqlList);
        End_statement_addBatches(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_addBatches(AsyncCallback callback, object state, RStatement statement, List<string> sqlList)
      #else
      public void send_statement_addBatches(RStatement statement, List<string> sqlList)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_addBatches", TMessageType.Call, seqid_));
        statement_addBatches_args args = new statement_addBatches_args();
        args.Statement = statement;
        args.SqlList = sqlList;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_statement_addBatches()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_addBatches_result result = new statement_addBatches_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_clearBatch(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_clearBatch(callback, state, statement);
      }

      public void End_statement_clearBatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_statement_clearBatch();
      }

      #endif

      public void statement_clearBatch(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_clearBatch(statement);
        recv_statement_clearBatch();

        #else
        var asyncResult = Begin_statement_clearBatch(null, null, statement);
        End_statement_clearBatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_clearBatch(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_clearBatch(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_clearBatch", TMessageType.Call, seqid_));
        statement_clearBatch_args args = new statement_clearBatch_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_statement_clearBatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_clearBatch_result result = new statement_clearBatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_executeBatch(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_executeBatch(callback, state, statement);
      }

      public List<int> End_statement_executeBatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_executeBatch();
      }

      #endif

      public List<int> statement_executeBatch(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_executeBatch(statement);
        return recv_statement_executeBatch();

        #else
        var asyncResult = Begin_statement_executeBatch(null, null, statement);
        return End_statement_executeBatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_executeBatch(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_executeBatch(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_executeBatch", TMessageType.Call, seqid_));
        statement_executeBatch_args args = new statement_executeBatch_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<int> recv_statement_executeBatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_executeBatch_result result = new statement_executeBatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_executeBatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_execute(AsyncCallback callback, object state, RStatement preparedstatement)
      {
        return send_preparedstatement_execute(callback, state, preparedstatement);
      }

      public bool End_preparedstatement_execute(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_preparedstatement_execute();
      }

      #endif

      public bool preparedstatement_execute(RStatement preparedstatement)
      {
        #if !SILVERLIGHT
        send_preparedstatement_execute(preparedstatement);
        return recv_preparedstatement_execute();

        #else
        var asyncResult = Begin_preparedstatement_execute(null, null, preparedstatement);
        return End_preparedstatement_execute(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_execute(AsyncCallback callback, object state, RStatement preparedstatement)
      #else
      public void send_preparedstatement_execute(RStatement preparedstatement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_execute", TMessageType.Call, seqid_));
        preparedstatement_execute_args args = new preparedstatement_execute_args();
        args.Preparedstatement = preparedstatement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_preparedstatement_execute()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_execute_result result = new preparedstatement_execute_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "preparedstatement_execute failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_executeQuery(AsyncCallback callback, object state, RStatement preparedstatement)
      {
        return send_preparedstatement_executeQuery(callback, state, preparedstatement);
      }

      public RResultSet End_preparedstatement_executeQuery(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_preparedstatement_executeQuery();
      }

      #endif

      public RResultSet preparedstatement_executeQuery(RStatement preparedstatement)
      {
        #if !SILVERLIGHT
        send_preparedstatement_executeQuery(preparedstatement);
        return recv_preparedstatement_executeQuery();

        #else
        var asyncResult = Begin_preparedstatement_executeQuery(null, null, preparedstatement);
        return End_preparedstatement_executeQuery(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_executeQuery(AsyncCallback callback, object state, RStatement preparedstatement)
      #else
      public void send_preparedstatement_executeQuery(RStatement preparedstatement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_executeQuery", TMessageType.Call, seqid_));
        preparedstatement_executeQuery_args args = new preparedstatement_executeQuery_args();
        args.Preparedstatement = preparedstatement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_preparedstatement_executeQuery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_executeQuery_result result = new preparedstatement_executeQuery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "preparedstatement_executeQuery failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_executeUpdate(AsyncCallback callback, object state, RStatement preparedstatement)
      {
        return send_preparedstatement_executeUpdate(callback, state, preparedstatement);
      }

      public int End_preparedstatement_executeUpdate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_preparedstatement_executeUpdate();
      }

      #endif

      public int preparedstatement_executeUpdate(RStatement preparedstatement)
      {
        #if !SILVERLIGHT
        send_preparedstatement_executeUpdate(preparedstatement);
        return recv_preparedstatement_executeUpdate();

        #else
        var asyncResult = Begin_preparedstatement_executeUpdate(null, null, preparedstatement);
        return End_preparedstatement_executeUpdate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_executeUpdate(AsyncCallback callback, object state, RStatement preparedstatement)
      #else
      public void send_preparedstatement_executeUpdate(RStatement preparedstatement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_executeUpdate", TMessageType.Call, seqid_));
        preparedstatement_executeUpdate_args args = new preparedstatement_executeUpdate_args();
        args.Preparedstatement = preparedstatement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_preparedstatement_executeUpdate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_executeUpdate_result result = new preparedstatement_executeUpdate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "preparedstatement_executeUpdate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_setParametersThenExecute(AsyncCallback callback, object state, RStatement preparedstatement, List<RValueSQL> parameters)
      {
        return send_preparedstatement_setParametersThenExecute(callback, state, preparedstatement, parameters);
      }

      public bool End_preparedstatement_setParametersThenExecute(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_preparedstatement_setParametersThenExecute();
      }

      #endif

      public bool preparedstatement_setParametersThenExecute(RStatement preparedstatement, List<RValueSQL> parameters)
      {
        #if !SILVERLIGHT
        send_preparedstatement_setParametersThenExecute(preparedstatement, parameters);
        return recv_preparedstatement_setParametersThenExecute();

        #else
        var asyncResult = Begin_preparedstatement_setParametersThenExecute(null, null, preparedstatement, parameters);
        return End_preparedstatement_setParametersThenExecute(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_setParametersThenExecute(AsyncCallback callback, object state, RStatement preparedstatement, List<RValueSQL> parameters)
      #else
      public void send_preparedstatement_setParametersThenExecute(RStatement preparedstatement, List<RValueSQL> parameters)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_setParametersThenExecute", TMessageType.Call, seqid_));
        preparedstatement_setParametersThenExecute_args args = new preparedstatement_setParametersThenExecute_args();
        args.Preparedstatement = preparedstatement;
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_preparedstatement_setParametersThenExecute()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_setParametersThenExecute_result result = new preparedstatement_setParametersThenExecute_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "preparedstatement_setParametersThenExecute failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_setParametersThenExecuteQuery(AsyncCallback callback, object state, RStatement preparedstatement, List<RValueSQL> parameters)
      {
        return send_preparedstatement_setParametersThenExecuteQuery(callback, state, preparedstatement, parameters);
      }

      public RResultSet End_preparedstatement_setParametersThenExecuteQuery(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_preparedstatement_setParametersThenExecuteQuery();
      }

      #endif

      public RResultSet preparedstatement_setParametersThenExecuteQuery(RStatement preparedstatement, List<RValueSQL> parameters)
      {
        #if !SILVERLIGHT
        send_preparedstatement_setParametersThenExecuteQuery(preparedstatement, parameters);
        return recv_preparedstatement_setParametersThenExecuteQuery();

        #else
        var asyncResult = Begin_preparedstatement_setParametersThenExecuteQuery(null, null, preparedstatement, parameters);
        return End_preparedstatement_setParametersThenExecuteQuery(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_setParametersThenExecuteQuery(AsyncCallback callback, object state, RStatement preparedstatement, List<RValueSQL> parameters)
      #else
      public void send_preparedstatement_setParametersThenExecuteQuery(RStatement preparedstatement, List<RValueSQL> parameters)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_setParametersThenExecuteQuery", TMessageType.Call, seqid_));
        preparedstatement_setParametersThenExecuteQuery_args args = new preparedstatement_setParametersThenExecuteQuery_args();
        args.Preparedstatement = preparedstatement;
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public RResultSet recv_preparedstatement_setParametersThenExecuteQuery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_setParametersThenExecuteQuery_result result = new preparedstatement_setParametersThenExecuteQuery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "preparedstatement_setParametersThenExecuteQuery failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_setParametersThenExecuteUpdate(AsyncCallback callback, object state, RStatement preparedstatement, List<RValueSQL> parameters)
      {
        return send_preparedstatement_setParametersThenExecuteUpdate(callback, state, preparedstatement, parameters);
      }

      public int End_preparedstatement_setParametersThenExecuteUpdate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_preparedstatement_setParametersThenExecuteUpdate();
      }

      #endif

      public int preparedstatement_setParametersThenExecuteUpdate(RStatement preparedstatement, List<RValueSQL> parameters)
      {
        #if !SILVERLIGHT
        send_preparedstatement_setParametersThenExecuteUpdate(preparedstatement, parameters);
        return recv_preparedstatement_setParametersThenExecuteUpdate();

        #else
        var asyncResult = Begin_preparedstatement_setParametersThenExecuteUpdate(null, null, preparedstatement, parameters);
        return End_preparedstatement_setParametersThenExecuteUpdate(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_setParametersThenExecuteUpdate(AsyncCallback callback, object state, RStatement preparedstatement, List<RValueSQL> parameters)
      #else
      public void send_preparedstatement_setParametersThenExecuteUpdate(RStatement preparedstatement, List<RValueSQL> parameters)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_setParametersThenExecuteUpdate", TMessageType.Call, seqid_));
        preparedstatement_setParametersThenExecuteUpdate_args args = new preparedstatement_setParametersThenExecuteUpdate_args();
        args.Preparedstatement = preparedstatement;
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_preparedstatement_setParametersThenExecuteUpdate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_setParametersThenExecuteUpdate_result result = new preparedstatement_setParametersThenExecuteUpdate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "preparedstatement_setParametersThenExecuteUpdate failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_setParameters(AsyncCallback callback, object state, RStatement preparedStatement, List<RValueSQL> parameters)
      {
        return send_preparedstatement_setParameters(callback, state, preparedStatement, parameters);
      }

      public void End_preparedstatement_setParameters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_preparedstatement_setParameters();
      }

      #endif

      public void preparedstatement_setParameters(RStatement preparedStatement, List<RValueSQL> parameters)
      {
        #if !SILVERLIGHT
        send_preparedstatement_setParameters(preparedStatement, parameters);
        recv_preparedstatement_setParameters();

        #else
        var asyncResult = Begin_preparedstatement_setParameters(null, null, preparedStatement, parameters);
        End_preparedstatement_setParameters(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_setParameters(AsyncCallback callback, object state, RStatement preparedStatement, List<RValueSQL> parameters)
      #else
      public void send_preparedstatement_setParameters(RStatement preparedStatement, List<RValueSQL> parameters)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_setParameters", TMessageType.Call, seqid_));
        preparedstatement_setParameters_args args = new preparedstatement_setParameters_args();
        args.PreparedStatement = preparedStatement;
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_preparedstatement_setParameters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_setParameters_result result = new preparedstatement_setParameters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_setParameter(AsyncCallback callback, object state, RStatement preparedStatement, RValueSQL parameter, int position)
      {
        return send_preparedstatement_setParameter(callback, state, preparedStatement, parameter, position);
      }

      public void End_preparedstatement_setParameter(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_preparedstatement_setParameter();
      }

      #endif

      public void preparedstatement_setParameter(RStatement preparedStatement, RValueSQL parameter, int position)
      {
        #if !SILVERLIGHT
        send_preparedstatement_setParameter(preparedStatement, parameter, position);
        recv_preparedstatement_setParameter();

        #else
        var asyncResult = Begin_preparedstatement_setParameter(null, null, preparedStatement, parameter, position);
        End_preparedstatement_setParameter(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_setParameter(AsyncCallback callback, object state, RStatement preparedStatement, RValueSQL parameter, int position)
      #else
      public void send_preparedstatement_setParameter(RStatement preparedStatement, RValueSQL parameter, int position)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_setParameter", TMessageType.Call, seqid_));
        preparedstatement_setParameter_args args = new preparedstatement_setParameter_args();
        args.PreparedStatement = preparedStatement;
        args.Parameter = parameter;
        args.Position = position;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_preparedstatement_setParameter()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_setParameter_result result = new preparedstatement_setParameter_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_clearParameters(AsyncCallback callback, object state, RStatement preparedStatement)
      {
        return send_preparedstatement_clearParameters(callback, state, preparedStatement);
      }

      public void End_preparedstatement_clearParameters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_preparedstatement_clearParameters();
      }

      #endif

      public void preparedstatement_clearParameters(RStatement preparedStatement)
      {
        #if !SILVERLIGHT
        send_preparedstatement_clearParameters(preparedStatement);
        recv_preparedstatement_clearParameters();

        #else
        var asyncResult = Begin_preparedstatement_clearParameters(null, null, preparedStatement);
        End_preparedstatement_clearParameters(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_clearParameters(AsyncCallback callback, object state, RStatement preparedStatement)
      #else
      public void send_preparedstatement_clearParameters(RStatement preparedStatement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_clearParameters", TMessageType.Call, seqid_));
        preparedstatement_clearParameters_args args = new preparedstatement_clearParameters_args();
        args.PreparedStatement = preparedStatement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_preparedstatement_clearParameters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_clearParameters_result result = new preparedstatement_clearParameters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_addBatchWithParameters(AsyncCallback callback, object state, RStatement preparedStatement, List<RValueSQL> parameters)
      {
        return send_preparedstatement_addBatchWithParameters(callback, state, preparedStatement, parameters);
      }

      public void End_preparedstatement_addBatchWithParameters(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_preparedstatement_addBatchWithParameters();
      }

      #endif

      public void preparedstatement_addBatchWithParameters(RStatement preparedStatement, List<RValueSQL> parameters)
      {
        #if !SILVERLIGHT
        send_preparedstatement_addBatchWithParameters(preparedStatement, parameters);
        recv_preparedstatement_addBatchWithParameters();

        #else
        var asyncResult = Begin_preparedstatement_addBatchWithParameters(null, null, preparedStatement, parameters);
        End_preparedstatement_addBatchWithParameters(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_addBatchWithParameters(AsyncCallback callback, object state, RStatement preparedStatement, List<RValueSQL> parameters)
      #else
      public void send_preparedstatement_addBatchWithParameters(RStatement preparedStatement, List<RValueSQL> parameters)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_addBatchWithParameters", TMessageType.Call, seqid_));
        preparedstatement_addBatchWithParameters_args args = new preparedstatement_addBatchWithParameters_args();
        args.PreparedStatement = preparedStatement;
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_preparedstatement_addBatchWithParameters()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_addBatchWithParameters_result result = new preparedstatement_addBatchWithParameters_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_addBatch(AsyncCallback callback, object state, RStatement preparedStatement)
      {
        return send_preparedstatement_addBatch(callback, state, preparedStatement);
      }

      public void End_preparedstatement_addBatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_preparedstatement_addBatch();
      }

      #endif

      public void preparedstatement_addBatch(RStatement preparedStatement)
      {
        #if !SILVERLIGHT
        send_preparedstatement_addBatch(preparedStatement);
        recv_preparedstatement_addBatch();

        #else
        var asyncResult = Begin_preparedstatement_addBatch(null, null, preparedStatement);
        End_preparedstatement_addBatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_addBatch(AsyncCallback callback, object state, RStatement preparedStatement)
      #else
      public void send_preparedstatement_addBatch(RStatement preparedStatement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_addBatch", TMessageType.Call, seqid_));
        preparedstatement_addBatch_args args = new preparedstatement_addBatch_args();
        args.PreparedStatement = preparedStatement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_preparedstatement_addBatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_addBatch_result result = new preparedstatement_addBatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_preparedstatement_executeBatch(AsyncCallback callback, object state, RStatement statement, List<List<RValueSQL>> parameters)
      {
        return send_preparedstatement_executeBatch(callback, state, statement, parameters);
      }

      public List<int> End_preparedstatement_executeBatch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_preparedstatement_executeBatch();
      }

      #endif

      public List<int> preparedstatement_executeBatch(RStatement statement, List<List<RValueSQL>> parameters)
      {
        #if !SILVERLIGHT
        send_preparedstatement_executeBatch(statement, parameters);
        return recv_preparedstatement_executeBatch();

        #else
        var asyncResult = Begin_preparedstatement_executeBatch(null, null, statement, parameters);
        return End_preparedstatement_executeBatch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_preparedstatement_executeBatch(AsyncCallback callback, object state, RStatement statement, List<List<RValueSQL>> parameters)
      #else
      public void send_preparedstatement_executeBatch(RStatement statement, List<List<RValueSQL>> parameters)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("preparedstatement_executeBatch", TMessageType.Call, seqid_));
        preparedstatement_executeBatch_args args = new preparedstatement_executeBatch_args();
        args.Statement = statement;
        args.Parameters = parameters;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<int> recv_preparedstatement_executeBatch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        preparedstatement_executeBatch_result result = new preparedstatement_executeBatch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "preparedstatement_executeBatch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_getWarnings(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_getWarnings(callback, state, statement);
      }

      public statement_getWarnings_return End_statement_getWarnings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_getWarnings();
      }

      #endif

      public statement_getWarnings_return statement_getWarnings(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_getWarnings(statement);
        return recv_statement_getWarnings();

        #else
        var asyncResult = Begin_statement_getWarnings(null, null, statement);
        return End_statement_getWarnings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_getWarnings(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_getWarnings(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_getWarnings", TMessageType.Call, seqid_));
        statement_getWarnings_args args = new statement_getWarnings_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public statement_getWarnings_return recv_statement_getWarnings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_getWarnings_result result = new statement_getWarnings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_getWarnings failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_clearWarnings(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_clearWarnings(callback, state, statement);
      }

      public void End_statement_clearWarnings(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_statement_clearWarnings();
      }

      #endif

      public void statement_clearWarnings(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_clearWarnings(statement);
        recv_statement_clearWarnings();

        #else
        var asyncResult = Begin_statement_clearWarnings(null, null, statement);
        End_statement_clearWarnings(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_clearWarnings(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_clearWarnings(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_clearWarnings", TMessageType.Call, seqid_));
        statement_clearWarnings_args args = new statement_clearWarnings_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_statement_clearWarnings()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_clearWarnings_result result = new statement_clearWarnings_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_getMaxRows(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_getMaxRows(callback, state, statement);
      }

      public int End_statement_getMaxRows(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_getMaxRows();
      }

      #endif

      public int statement_getMaxRows(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_getMaxRows(statement);
        return recv_statement_getMaxRows();

        #else
        var asyncResult = Begin_statement_getMaxRows(null, null, statement);
        return End_statement_getMaxRows(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_getMaxRows(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_getMaxRows(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_getMaxRows", TMessageType.Call, seqid_));
        statement_getMaxRows_args args = new statement_getMaxRows_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_statement_getMaxRows()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_getMaxRows_result result = new statement_getMaxRows_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_getMaxRows failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_setMaxRows(AsyncCallback callback, object state, RStatement statement, int max)
      {
        return send_statement_setMaxRows(callback, state, statement, max);
      }

      public void End_statement_setMaxRows(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_statement_setMaxRows();
      }

      #endif

      public void statement_setMaxRows(RStatement statement, int max)
      {
        #if !SILVERLIGHT
        send_statement_setMaxRows(statement, max);
        recv_statement_setMaxRows();

        #else
        var asyncResult = Begin_statement_setMaxRows(null, null, statement, max);
        End_statement_setMaxRows(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_setMaxRows(AsyncCallback callback, object state, RStatement statement, int max)
      #else
      public void send_statement_setMaxRows(RStatement statement, int max)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_setMaxRows", TMessageType.Call, seqid_));
        statement_setMaxRows_args args = new statement_setMaxRows_args();
        args.Statement = statement;
        args.Max = max;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_statement_setMaxRows()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_setMaxRows_result result = new statement_setMaxRows_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_getQueryTimeout(AsyncCallback callback, object state, RStatement statement)
      {
        return send_statement_getQueryTimeout(callback, state, statement);
      }

      public int End_statement_getQueryTimeout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_statement_getQueryTimeout();
      }

      #endif

      public int statement_getQueryTimeout(RStatement statement)
      {
        #if !SILVERLIGHT
        send_statement_getQueryTimeout(statement);
        return recv_statement_getQueryTimeout();

        #else
        var asyncResult = Begin_statement_getQueryTimeout(null, null, statement);
        return End_statement_getQueryTimeout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_getQueryTimeout(AsyncCallback callback, object state, RStatement statement)
      #else
      public void send_statement_getQueryTimeout(RStatement statement)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_getQueryTimeout", TMessageType.Call, seqid_));
        statement_getQueryTimeout_args args = new statement_getQueryTimeout_args();
        args.Statement = statement;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_statement_getQueryTimeout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_getQueryTimeout_result result = new statement_getQueryTimeout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "statement_getQueryTimeout failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_statement_setQueryTimeout(AsyncCallback callback, object state, RStatement statement, int seconds)
      {
        return send_statement_setQueryTimeout(callback, state, statement, seconds);
      }

      public void End_statement_setQueryTimeout(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_statement_setQueryTimeout();
      }

      #endif

      public void statement_setQueryTimeout(RStatement statement, int seconds)
      {
        #if !SILVERLIGHT
        send_statement_setQueryTimeout(statement, seconds);
        recv_statement_setQueryTimeout();

        #else
        var asyncResult = Begin_statement_setQueryTimeout(null, null, statement, seconds);
        End_statement_setQueryTimeout(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_statement_setQueryTimeout(AsyncCallback callback, object state, RStatement statement, int seconds)
      #else
      public void send_statement_setQueryTimeout(RStatement statement, int seconds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("statement_setQueryTimeout", TMessageType.Call, seqid_));
        statement_setQueryTimeout_args args = new statement_setQueryTimeout_args();
        args.Statement = statement;
        args.Seconds = seconds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_statement_setQueryTimeout()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        statement_setQueryTimeout_result result = new statement_setQueryTimeout_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.sqlException) {
          throw result.SqlException;
        }
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["createConnection"] = createConnection_Process;
        processMap_["createStatement"] = createStatement_Process;
        processMap_["prepareStatement"] = prepareStatement_Process;
        processMap_["prepareCall"] = prepareCall_Process;
        processMap_["connection_getstaticmetadata"] = connection_getstaticmetadata_Process;
        processMap_["connection_isvalid"] = connection_isvalid_Process;
        processMap_["connection_commit"] = connection_commit_Process;
        processMap_["connection_rollback"] = connection_rollback_Process;
        processMap_["connection_setAutoCommit"] = connection_setAutoCommit_Process;
        processMap_["connection_getAutoCommit"] = connection_getAutoCommit_Process;
        processMap_["connection_setTransactionIsolation"] = connection_setTransactionIsolation_Process;
        processMap_["connection_getTransactionIsolation"] = connection_getTransactionIsolation_Process;
        processMap_["connection_setReadOnly"] = connection_setReadOnly_Process;
        processMap_["connection_getReadOnly"] = connection_getReadOnly_Process;
        processMap_["connection_setCatalog"] = connection_setCatalog_Process;
        processMap_["connection_getCatalog"] = connection_getCatalog_Process;
        processMap_["connection_setSchema"] = connection_setSchema_Process;
        processMap_["connection_getSchema"] = connection_getSchema_Process;
        processMap_["connection_getCatalogSeparator"] = connection_getCatalogSeparator_Process;
        processMap_["connection_getCatalogTerm"] = connection_getCatalogTerm_Process;
        processMap_["connection_getSchemaTerm"] = connection_getSchemaTerm_Process;
        processMap_["connection_getCatalogs"] = connection_getCatalogs_Process;
        processMap_["connection_getSchemas"] = connection_getSchemas_Process;
        processMap_["connection_getTables"] = connection_getTables_Process;
        processMap_["connection_getColumns"] = connection_getColumns_Process;
        processMap_["connection_getSQLKeywords"] = connection_getSQLKeywords_Process;
        processMap_["connection_getTableTypes"] = connection_getTableTypes_Process;
        processMap_["connection_getTypeInfo"] = connection_getTypeInfo_Process;
        processMap_["closeConnection"] = closeConnection_Process;
        processMap_["statement_close"] = statement_close_Process;
        processMap_["statement_execute"] = statement_execute_Process;
        processMap_["statement_executeQuery"] = statement_executeQuery_Process;
        processMap_["statement_executeUpdate"] = statement_executeUpdate_Process;
        processMap_["statement_getResultSet"] = statement_getResultSet_Process;
        processMap_["statement_getUpdateCount"] = statement_getUpdateCount_Process;
        processMap_["statement_getResultSetType"] = statement_getResultSetType_Process;
        processMap_["statement_cancel"] = statement_cancel_Process;
        processMap_["statement_addBatch"] = statement_addBatch_Process;
        processMap_["statement_addBatches"] = statement_addBatches_Process;
        processMap_["statement_clearBatch"] = statement_clearBatch_Process;
        processMap_["statement_executeBatch"] = statement_executeBatch_Process;
        processMap_["preparedstatement_execute"] = preparedstatement_execute_Process;
        processMap_["preparedstatement_executeQuery"] = preparedstatement_executeQuery_Process;
        processMap_["preparedstatement_executeUpdate"] = preparedstatement_executeUpdate_Process;
        processMap_["preparedstatement_setParametersThenExecute"] = preparedstatement_setParametersThenExecute_Process;
        processMap_["preparedstatement_setParametersThenExecuteQuery"] = preparedstatement_setParametersThenExecuteQuery_Process;
        processMap_["preparedstatement_setParametersThenExecuteUpdate"] = preparedstatement_setParametersThenExecuteUpdate_Process;
        processMap_["preparedstatement_setParameters"] = preparedstatement_setParameters_Process;
        processMap_["preparedstatement_setParameter"] = preparedstatement_setParameter_Process;
        processMap_["preparedstatement_clearParameters"] = preparedstatement_clearParameters_Process;
        processMap_["preparedstatement_addBatchWithParameters"] = preparedstatement_addBatchWithParameters_Process;
        processMap_["preparedstatement_addBatch"] = preparedstatement_addBatch_Process;
        processMap_["preparedstatement_executeBatch"] = preparedstatement_executeBatch_Process;
        processMap_["statement_getWarnings"] = statement_getWarnings_Process;
        processMap_["statement_clearWarnings"] = statement_clearWarnings_Process;
        processMap_["statement_getMaxRows"] = statement_getMaxRows_Process;
        processMap_["statement_setMaxRows"] = statement_setMaxRows_Process;
        processMap_["statement_getQueryTimeout"] = statement_getQueryTimeout_Process;
        processMap_["statement_setQueryTimeout"] = statement_setQueryTimeout_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void createConnection_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createConnection_args args = new createConnection_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createConnection_result result = new createConnection_result();
        try {
          result.Success = iface_.createConnection(args.Url, args.Properties);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("createConnection", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void createStatement_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        createStatement_args args = new createStatement_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        createStatement_result result = new createStatement_result();
        try {
          result.Success = iface_.createStatement(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("createStatement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void prepareStatement_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        prepareStatement_args args = new prepareStatement_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        prepareStatement_result result = new prepareStatement_result();
        try {
          result.Success = iface_.prepareStatement(args.Connection, args.Sql);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("prepareStatement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void prepareCall_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        prepareCall_args args = new prepareCall_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        prepareCall_result result = new prepareCall_result();
        try {
          result.Success = iface_.prepareCall(args.Connection, args.Sql);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("prepareCall", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getstaticmetadata_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getstaticmetadata_args args = new connection_getstaticmetadata_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getstaticmetadata_result result = new connection_getstaticmetadata_result();
        try {
          result.Success = iface_.connection_getstaticmetadata(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getstaticmetadata", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_isvalid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_isvalid_args args = new connection_isvalid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_isvalid_result result = new connection_isvalid_result();
        try {
          result.Success = iface_.connection_isvalid(args.Connection, args.Timeout);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_isvalid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_commit_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_commit_args args = new connection_commit_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_commit_result result = new connection_commit_result();
        try {
          iface_.connection_commit(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_commit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_rollback_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_rollback_args args = new connection_rollback_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_rollback_result result = new connection_rollback_result();
        try {
          iface_.connection_rollback(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_rollback", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_setAutoCommit_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_setAutoCommit_args args = new connection_setAutoCommit_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_setAutoCommit_result result = new connection_setAutoCommit_result();
        try {
          iface_.connection_setAutoCommit(args.Connection, args.AutoCommit);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_setAutoCommit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getAutoCommit_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getAutoCommit_args args = new connection_getAutoCommit_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getAutoCommit_result result = new connection_getAutoCommit_result();
        try {
          result.Success = iface_.connection_getAutoCommit(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getAutoCommit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_setTransactionIsolation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_setTransactionIsolation_args args = new connection_setTransactionIsolation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_setTransactionIsolation_result result = new connection_setTransactionIsolation_result();
        try {
          iface_.connection_setTransactionIsolation(args.Connection, args.Level);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_setTransactionIsolation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getTransactionIsolation_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getTransactionIsolation_args args = new connection_getTransactionIsolation_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getTransactionIsolation_result result = new connection_getTransactionIsolation_result();
        try {
          result.Success = iface_.connection_getTransactionIsolation(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getTransactionIsolation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_setReadOnly_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_setReadOnly_args args = new connection_setReadOnly_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_setReadOnly_result result = new connection_setReadOnly_result();
        try {
          iface_.connection_setReadOnly(args.Connection, args.ReadOnly);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_setReadOnly", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getReadOnly_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getReadOnly_args args = new connection_getReadOnly_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getReadOnly_result result = new connection_getReadOnly_result();
        try {
          result.Success = iface_.connection_getReadOnly(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getReadOnly", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_setCatalog_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_setCatalog_args args = new connection_setCatalog_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_setCatalog_result result = new connection_setCatalog_result();
        try {
          iface_.connection_setCatalog(args.Connection, args.Catalog);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_setCatalog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getCatalog_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getCatalog_args args = new connection_getCatalog_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getCatalog_result result = new connection_getCatalog_result();
        try {
          result.Success = iface_.connection_getCatalog(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getCatalog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_setSchema_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_setSchema_args args = new connection_setSchema_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_setSchema_result result = new connection_setSchema_result();
        try {
          iface_.connection_setSchema(args.Connection, args.Schema);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_setSchema", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getSchema_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getSchema_args args = new connection_getSchema_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getSchema_result result = new connection_getSchema_result();
        try {
          result.Success = iface_.connection_getSchema(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getSchema", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getCatalogSeparator_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getCatalogSeparator_args args = new connection_getCatalogSeparator_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getCatalogSeparator_result result = new connection_getCatalogSeparator_result();
        try {
          result.Success = iface_.connection_getCatalogSeparator(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getCatalogSeparator", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getCatalogTerm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getCatalogTerm_args args = new connection_getCatalogTerm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getCatalogTerm_result result = new connection_getCatalogTerm_result();
        try {
          result.Success = iface_.connection_getCatalogTerm(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getCatalogTerm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getSchemaTerm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getSchemaTerm_args args = new connection_getSchemaTerm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getSchemaTerm_result result = new connection_getSchemaTerm_result();
        try {
          result.Success = iface_.connection_getSchemaTerm(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getSchemaTerm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getCatalogs_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getCatalogs_args args = new connection_getCatalogs_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getCatalogs_result result = new connection_getCatalogs_result();
        try {
          result.Success = iface_.connection_getCatalogs(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getCatalogs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getSchemas_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getSchemas_args args = new connection_getSchemas_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getSchemas_result result = new connection_getSchemas_result();
        try {
          result.Success = iface_.connection_getSchemas(args.Connection, args.Catalog, args.SchemaPattern);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getSchemas", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getTables_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getTables_args args = new connection_getTables_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getTables_result result = new connection_getTables_result();
        try {
          result.Success = iface_.connection_getTables(args.Connection, args.Catalog, args.SchemaPattern, args.TableNamePattern, args.Types);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getTables", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getColumns_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getColumns_args args = new connection_getColumns_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getColumns_result result = new connection_getColumns_result();
        try {
          result.Success = iface_.connection_getColumns(args.Connection, args.Catalog, args.SchemaPattern, args.TableNamePattern, args.ColumnNamePattern);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getColumns", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getSQLKeywords_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getSQLKeywords_args args = new connection_getSQLKeywords_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getSQLKeywords_result result = new connection_getSQLKeywords_result();
        try {
          result.Success = iface_.connection_getSQLKeywords(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getSQLKeywords", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getTableTypes_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getTableTypes_args args = new connection_getTableTypes_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getTableTypes_result result = new connection_getTableTypes_result();
        try {
          result.Success = iface_.connection_getTableTypes(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getTableTypes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void connection_getTypeInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connection_getTypeInfo_args args = new connection_getTypeInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connection_getTypeInfo_result result = new connection_getTypeInfo_result();
        try {
          result.Success = iface_.connection_getTypeInfo(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("connection_getTypeInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void closeConnection_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        closeConnection_args args = new closeConnection_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        closeConnection_result result = new closeConnection_result();
        try {
          iface_.closeConnection(args.Connection);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("closeConnection", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_close_args args = new statement_close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_close_result result = new statement_close_result();
        try {
          iface_.statement_close(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_execute_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_execute_args args = new statement_execute_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_execute_result result = new statement_execute_result();
        try {
          result.Success = iface_.statement_execute(args.Statement, args.Sql);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_execute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_executeQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_executeQuery_args args = new statement_executeQuery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_executeQuery_result result = new statement_executeQuery_result();
        try {
          result.Success = iface_.statement_executeQuery(args.Statement, args.Sql);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_executeQuery", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_executeUpdate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_executeUpdate_args args = new statement_executeUpdate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_executeUpdate_result result = new statement_executeUpdate_result();
        try {
          result.Success = iface_.statement_executeUpdate(args.Statement, args.Sql);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_executeUpdate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_getResultSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_getResultSet_args args = new statement_getResultSet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_getResultSet_result result = new statement_getResultSet_result();
        try {
          result.Success = iface_.statement_getResultSet(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_getResultSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_getUpdateCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_getUpdateCount_args args = new statement_getUpdateCount_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_getUpdateCount_result result = new statement_getUpdateCount_result();
        try {
          result.Success = iface_.statement_getUpdateCount(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_getUpdateCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_getResultSetType_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_getResultSetType_args args = new statement_getResultSetType_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_getResultSetType_result result = new statement_getResultSetType_result();
        try {
          result.Success = iface_.statement_getResultSetType(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_getResultSetType", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_cancel_args args = new statement_cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_cancel_result result = new statement_cancel_result();
        try {
          iface_.statement_cancel(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_addBatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_addBatch_args args = new statement_addBatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_addBatch_result result = new statement_addBatch_result();
        try {
          iface_.statement_addBatch(args.Statement, args.Sql);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_addBatch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_addBatches_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_addBatches_args args = new statement_addBatches_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_addBatches_result result = new statement_addBatches_result();
        try {
          iface_.statement_addBatches(args.Statement, args.SqlList);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_addBatches", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_clearBatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_clearBatch_args args = new statement_clearBatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_clearBatch_result result = new statement_clearBatch_result();
        try {
          iface_.statement_clearBatch(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_clearBatch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_executeBatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_executeBatch_args args = new statement_executeBatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_executeBatch_result result = new statement_executeBatch_result();
        try {
          result.Success = iface_.statement_executeBatch(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_executeBatch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_execute_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_execute_args args = new preparedstatement_execute_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_execute_result result = new preparedstatement_execute_result();
        try {
          result.Success = iface_.preparedstatement_execute(args.Preparedstatement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_execute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_executeQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_executeQuery_args args = new preparedstatement_executeQuery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_executeQuery_result result = new preparedstatement_executeQuery_result();
        try {
          result.Success = iface_.preparedstatement_executeQuery(args.Preparedstatement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_executeQuery", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_executeUpdate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_executeUpdate_args args = new preparedstatement_executeUpdate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_executeUpdate_result result = new preparedstatement_executeUpdate_result();
        try {
          result.Success = iface_.preparedstatement_executeUpdate(args.Preparedstatement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_executeUpdate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_setParametersThenExecute_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_setParametersThenExecute_args args = new preparedstatement_setParametersThenExecute_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_setParametersThenExecute_result result = new preparedstatement_setParametersThenExecute_result();
        try {
          result.Success = iface_.preparedstatement_setParametersThenExecute(args.Preparedstatement, args.Parameters);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_setParametersThenExecute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_setParametersThenExecuteQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_setParametersThenExecuteQuery_args args = new preparedstatement_setParametersThenExecuteQuery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_setParametersThenExecuteQuery_result result = new preparedstatement_setParametersThenExecuteQuery_result();
        try {
          result.Success = iface_.preparedstatement_setParametersThenExecuteQuery(args.Preparedstatement, args.Parameters);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_setParametersThenExecuteQuery", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_setParametersThenExecuteUpdate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_setParametersThenExecuteUpdate_args args = new preparedstatement_setParametersThenExecuteUpdate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_setParametersThenExecuteUpdate_result result = new preparedstatement_setParametersThenExecuteUpdate_result();
        try {
          result.Success = iface_.preparedstatement_setParametersThenExecuteUpdate(args.Preparedstatement, args.Parameters);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_setParametersThenExecuteUpdate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_setParameters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_setParameters_args args = new preparedstatement_setParameters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_setParameters_result result = new preparedstatement_setParameters_result();
        try {
          iface_.preparedstatement_setParameters(args.PreparedStatement, args.Parameters);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_setParameters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_setParameter_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_setParameter_args args = new preparedstatement_setParameter_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_setParameter_result result = new preparedstatement_setParameter_result();
        try {
          iface_.preparedstatement_setParameter(args.PreparedStatement, args.Parameter, args.Position);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_setParameter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_clearParameters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_clearParameters_args args = new preparedstatement_clearParameters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_clearParameters_result result = new preparedstatement_clearParameters_result();
        try {
          iface_.preparedstatement_clearParameters(args.PreparedStatement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_clearParameters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_addBatchWithParameters_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_addBatchWithParameters_args args = new preparedstatement_addBatchWithParameters_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_addBatchWithParameters_result result = new preparedstatement_addBatchWithParameters_result();
        try {
          iface_.preparedstatement_addBatchWithParameters(args.PreparedStatement, args.Parameters);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_addBatchWithParameters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_addBatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_addBatch_args args = new preparedstatement_addBatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_addBatch_result result = new preparedstatement_addBatch_result();
        try {
          iface_.preparedstatement_addBatch(args.PreparedStatement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_addBatch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void preparedstatement_executeBatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        preparedstatement_executeBatch_args args = new preparedstatement_executeBatch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        preparedstatement_executeBatch_result result = new preparedstatement_executeBatch_result();
        try {
          result.Success = iface_.preparedstatement_executeBatch(args.Statement, args.Parameters);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("preparedstatement_executeBatch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_getWarnings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_getWarnings_args args = new statement_getWarnings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_getWarnings_result result = new statement_getWarnings_result();
        try {
          result.Success = iface_.statement_getWarnings(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_getWarnings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_clearWarnings_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_clearWarnings_args args = new statement_clearWarnings_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_clearWarnings_result result = new statement_clearWarnings_result();
        try {
          iface_.statement_clearWarnings(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_clearWarnings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_getMaxRows_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_getMaxRows_args args = new statement_getMaxRows_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_getMaxRows_result result = new statement_getMaxRows_result();
        try {
          result.Success = iface_.statement_getMaxRows(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_getMaxRows", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_setMaxRows_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_setMaxRows_args args = new statement_setMaxRows_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_setMaxRows_result result = new statement_setMaxRows_result();
        try {
          iface_.statement_setMaxRows(args.Statement, args.Max);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_setMaxRows", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_getQueryTimeout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_getQueryTimeout_args args = new statement_getQueryTimeout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_getQueryTimeout_result result = new statement_getQueryTimeout_result();
        try {
          result.Success = iface_.statement_getQueryTimeout(args.Statement);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_getQueryTimeout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void statement_setQueryTimeout_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        statement_setQueryTimeout_args args = new statement_setQueryTimeout_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        statement_setQueryTimeout_result result = new statement_setQueryTimeout_result();
        try {
          iface_.statement_setQueryTimeout(args.Statement, args.Seconds);
        } catch (RSQLException sqlException) {
          result.SqlException = sqlException;
        }
        oprot.WriteMessageBegin(new TMessage("statement_setQueryTimeout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createConnection_args : TBase
    {
      private string _url;
      private Dictionary<string, string> _properties;

      public string Url
      {
        get
        {
          return _url;
        }
        set
        {
          __isset.url = true;
          this._url = value;
        }
      }

      public Dictionary<string, string> Properties
      {
        get
        {
          return _properties;
        }
        set
        {
          __isset.properties = true;
          this._properties = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool url;
        public bool properties;
      }

      public createConnection_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Url = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Properties = new Dictionary<string, string>();
                  TMap _map20 = iprot.ReadMapBegin();
                  for( int _i21 = 0; _i21 < _map20.Count; ++_i21)
                  {
                    string _key22;
                    string _val23;
                    _key22 = iprot.ReadString();
                    _val23 = iprot.ReadString();
                    Properties[_key22] = _val23;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createConnection_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Url != null && __isset.url) {
          field.Name = "url";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Url);
          oprot.WriteFieldEnd();
        }
        if (Properties != null && __isset.properties) {
          field.Name = "properties";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Properties.Count));
            foreach (string _iter24 in Properties.Keys)
            {
              oprot.WriteString(_iter24);
              oprot.WriteString(Properties[_iter24]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createConnection_args(");
        bool __first = true;
        if (Url != null && __isset.url) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Url: ");
          __sb.Append(Url);
        }
        if (Properties != null && __isset.properties) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Properties: ");
          __sb.Append(Properties);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createConnection_result : TBase
    {
      private RConnection _success;
      private RSQLException _sqlException;

      public RConnection Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public createConnection_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RConnection();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createConnection_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createConnection_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createStatement_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public createStatement_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createStatement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createStatement_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class createStatement_result : TBase
    {
      private RStatement _success;
      private RSQLException _sqlException;

      public RStatement Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public createStatement_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RStatement();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("createStatement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("createStatement_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepareStatement_args : TBase
    {
      private RConnection _connection;
      private string _sql;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool sql;
      }

      public prepareStatement_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Sql = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepareStatement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Sql != null && __isset.sql) {
          field.Name = "sql";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sql);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("prepareStatement_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (Sql != null && __isset.sql) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sql: ");
          __sb.Append(Sql);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepareStatement_result : TBase
    {
      private RStatement _success;
      private RSQLException _sqlException;

      public RStatement Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public prepareStatement_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RStatement();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepareStatement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("prepareStatement_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepareCall_args : TBase
    {
      private RConnection _connection;
      private string _sql;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool sql;
      }

      public prepareCall_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Sql = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepareCall_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Sql != null && __isset.sql) {
          field.Name = "sql";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sql);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("prepareCall_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (Sql != null && __isset.sql) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sql: ");
          __sb.Append(Sql);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class prepareCall_result : TBase
    {
      private RStatement _success;
      private RSQLException _sqlException;

      public RStatement Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public prepareCall_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RStatement();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("prepareCall_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("prepareCall_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getstaticmetadata_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getstaticmetadata_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getstaticmetadata_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getstaticmetadata_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getstaticmetadata_result : TBase
    {
      private RStaticMetaData _success;
      private RSQLException _sqlException;

      public RStaticMetaData Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getstaticmetadata_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RStaticMetaData();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getstaticmetadata_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getstaticmetadata_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_isvalid_args : TBase
    {
      private RConnection _connection;
      private int _timeout;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public int Timeout
      {
        get
        {
          return _timeout;
        }
        set
        {
          __isset.timeout = true;
          this._timeout = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool timeout;
      }

      public connection_isvalid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Timeout = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_isvalid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeout) {
          field.Name = "timeout";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Timeout);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_isvalid_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (__isset.timeout) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Timeout: ");
          __sb.Append(Timeout);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_isvalid_result : TBase
    {
      private bool _success;
      private RSQLException _sqlException;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_isvalid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_isvalid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_isvalid_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_commit_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_commit_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_commit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_commit_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_commit_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public connection_commit_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_commit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_commit_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_rollback_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_rollback_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_rollback_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_rollback_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_rollback_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public connection_rollback_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_rollback_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_rollback_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setAutoCommit_args : TBase
    {
      private RConnection _connection;
      private bool _autoCommit;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public bool AutoCommit
      {
        get
        {
          return _autoCommit;
        }
        set
        {
          __isset.autoCommit = true;
          this._autoCommit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool autoCommit;
      }

      public connection_setAutoCommit_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                AutoCommit = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setAutoCommit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.autoCommit) {
          field.Name = "autoCommit";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(AutoCommit);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setAutoCommit_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (__isset.autoCommit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AutoCommit: ");
          __sb.Append(AutoCommit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setAutoCommit_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public connection_setAutoCommit_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setAutoCommit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setAutoCommit_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getAutoCommit_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getAutoCommit_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getAutoCommit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getAutoCommit_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getAutoCommit_result : TBase
    {
      private bool _success;
      private RSQLException _sqlException;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getAutoCommit_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getAutoCommit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getAutoCommit_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setTransactionIsolation_args : TBase
    {
      private RConnection _connection;
      private int _level;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public int Level
      {
        get
        {
          return _level;
        }
        set
        {
          __isset.level = true;
          this._level = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool level;
      }

      public connection_setTransactionIsolation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Level = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setTransactionIsolation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.level) {
          field.Name = "level";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setTransactionIsolation_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (__isset.level) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Level: ");
          __sb.Append(Level);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setTransactionIsolation_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public connection_setTransactionIsolation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setTransactionIsolation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setTransactionIsolation_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getTransactionIsolation_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getTransactionIsolation_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getTransactionIsolation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getTransactionIsolation_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getTransactionIsolation_result : TBase
    {
      private int _success;
      private RSQLException _sqlException;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getTransactionIsolation_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getTransactionIsolation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getTransactionIsolation_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setReadOnly_args : TBase
    {
      private RConnection _connection;
      private bool _readOnly;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public bool ReadOnly
      {
        get
        {
          return _readOnly;
        }
        set
        {
          __isset.@readOnly = true;
          this._readOnly = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool @readOnly;
      }

      public connection_setReadOnly_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                ReadOnly = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setReadOnly_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.@readOnly) {
          field.Name = "readOnly";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ReadOnly);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setReadOnly_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (__isset.@readOnly) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ReadOnly: ");
          __sb.Append(ReadOnly);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setReadOnly_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public connection_setReadOnly_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setReadOnly_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setReadOnly_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getReadOnly_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getReadOnly_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getReadOnly_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getReadOnly_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getReadOnly_result : TBase
    {
      private bool _success;
      private RSQLException _sqlException;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getReadOnly_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getReadOnly_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getReadOnly_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setCatalog_args : TBase
    {
      private RConnection _connection;
      private string _catalog;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public string Catalog
      {
        get
        {
          return _catalog;
        }
        set
        {
          __isset.catalog = true;
          this._catalog = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool catalog;
      }

      public connection_setCatalog_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Catalog = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setCatalog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Catalog != null && __isset.catalog) {
          field.Name = "catalog";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Catalog);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setCatalog_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (Catalog != null && __isset.catalog) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Catalog: ");
          __sb.Append(Catalog);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setCatalog_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public connection_setCatalog_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setCatalog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setCatalog_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getCatalog_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getCatalog_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getCatalog_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getCatalog_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getCatalog_result : TBase
    {
      private string _success;
      private RSQLException _sqlException;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getCatalog_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getCatalog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getCatalog_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setSchema_args : TBase
    {
      private RConnection _connection;
      private string _schema;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public string Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool schema;
      }

      public connection_setSchema_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Schema = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setSchema_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Schema != null && __isset.schema) {
          field.Name = "schema";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Schema);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setSchema_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (Schema != null && __isset.schema) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Schema: ");
          __sb.Append(Schema);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_setSchema_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public connection_setSchema_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_setSchema_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_setSchema_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getSchema_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getSchema_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getSchema_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getSchema_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getSchema_result : TBase
    {
      private string _success;
      private RSQLException _sqlException;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getSchema_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getSchema_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getSchema_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getCatalogSeparator_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getCatalogSeparator_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getCatalogSeparator_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getCatalogSeparator_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getCatalogSeparator_result : TBase
    {
      private string _success;
      private RSQLException _sqlException;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getCatalogSeparator_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getCatalogSeparator_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getCatalogSeparator_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getCatalogTerm_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getCatalogTerm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getCatalogTerm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getCatalogTerm_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getCatalogTerm_result : TBase
    {
      private string _success;
      private RSQLException _sqlException;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getCatalogTerm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getCatalogTerm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getCatalogTerm_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getSchemaTerm_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getSchemaTerm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getSchemaTerm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getSchemaTerm_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getSchemaTerm_result : TBase
    {
      private string _success;
      private RSQLException _sqlException;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getSchemaTerm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getSchemaTerm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getSchemaTerm_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getCatalogs_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getCatalogs_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getCatalogs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getCatalogs_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getCatalogs_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getCatalogs_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getCatalogs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getCatalogs_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getSchemas_args : TBase
    {
      private RConnection _connection;
      private string _catalog;
      private string _schemaPattern;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public string Catalog
      {
        get
        {
          return _catalog;
        }
        set
        {
          __isset.catalog = true;
          this._catalog = value;
        }
      }

      public string SchemaPattern
      {
        get
        {
          return _schemaPattern;
        }
        set
        {
          __isset.schemaPattern = true;
          this._schemaPattern = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool catalog;
        public bool schemaPattern;
      }

      public connection_getSchemas_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Catalog = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SchemaPattern = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getSchemas_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Catalog != null && __isset.catalog) {
          field.Name = "catalog";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Catalog);
          oprot.WriteFieldEnd();
        }
        if (SchemaPattern != null && __isset.schemaPattern) {
          field.Name = "schemaPattern";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SchemaPattern);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getSchemas_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (Catalog != null && __isset.catalog) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Catalog: ");
          __sb.Append(Catalog);
        }
        if (SchemaPattern != null && __isset.schemaPattern) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SchemaPattern: ");
          __sb.Append(SchemaPattern);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getSchemas_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getSchemas_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getSchemas_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getSchemas_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getTables_args : TBase
    {
      private RConnection _connection;
      private string _catalog;
      private string _schemaPattern;
      private string _tableNamePattern;
      private List<string> _types;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public string Catalog
      {
        get
        {
          return _catalog;
        }
        set
        {
          __isset.catalog = true;
          this._catalog = value;
        }
      }

      public string SchemaPattern
      {
        get
        {
          return _schemaPattern;
        }
        set
        {
          __isset.schemaPattern = true;
          this._schemaPattern = value;
        }
      }

      public string TableNamePattern
      {
        get
        {
          return _tableNamePattern;
        }
        set
        {
          __isset.tableNamePattern = true;
          this._tableNamePattern = value;
        }
      }

      public List<string> Types
      {
        get
        {
          return _types;
        }
        set
        {
          __isset.types = true;
          this._types = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool catalog;
        public bool schemaPattern;
        public bool tableNamePattern;
        public bool types;
      }

      public connection_getTables_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Catalog = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SchemaPattern = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                TableNamePattern = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Types = new List<string>();
                  TList _list25 = iprot.ReadListBegin();
                  for( int _i26 = 0; _i26 < _list25.Count; ++_i26)
                  {
                    string _elem27;
                    _elem27 = iprot.ReadString();
                    Types.Add(_elem27);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getTables_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Catalog != null && __isset.catalog) {
          field.Name = "catalog";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Catalog);
          oprot.WriteFieldEnd();
        }
        if (SchemaPattern != null && __isset.schemaPattern) {
          field.Name = "schemaPattern";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SchemaPattern);
          oprot.WriteFieldEnd();
        }
        if (TableNamePattern != null && __isset.tableNamePattern) {
          field.Name = "tableNamePattern";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TableNamePattern);
          oprot.WriteFieldEnd();
        }
        if (Types != null && __isset.types) {
          field.Name = "types";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Types.Count));
            foreach (string _iter28 in Types)
            {
              oprot.WriteString(_iter28);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getTables_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (Catalog != null && __isset.catalog) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Catalog: ");
          __sb.Append(Catalog);
        }
        if (SchemaPattern != null && __isset.schemaPattern) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SchemaPattern: ");
          __sb.Append(SchemaPattern);
        }
        if (TableNamePattern != null && __isset.tableNamePattern) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TableNamePattern: ");
          __sb.Append(TableNamePattern);
        }
        if (Types != null && __isset.types) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Types: ");
          __sb.Append(Types);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getTables_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getTables_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getTables_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getTables_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getColumns_args : TBase
    {
      private RConnection _connection;
      private string _catalog;
      private string _schemaPattern;
      private string _tableNamePattern;
      private string _columnNamePattern;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }

      public string Catalog
      {
        get
        {
          return _catalog;
        }
        set
        {
          __isset.catalog = true;
          this._catalog = value;
        }
      }

      public string SchemaPattern
      {
        get
        {
          return _schemaPattern;
        }
        set
        {
          __isset.schemaPattern = true;
          this._schemaPattern = value;
        }
      }

      public string TableNamePattern
      {
        get
        {
          return _tableNamePattern;
        }
        set
        {
          __isset.tableNamePattern = true;
          this._tableNamePattern = value;
        }
      }

      public string ColumnNamePattern
      {
        get
        {
          return _columnNamePattern;
        }
        set
        {
          __isset.columnNamePattern = true;
          this._columnNamePattern = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
        public bool catalog;
        public bool schemaPattern;
        public bool tableNamePattern;
        public bool columnNamePattern;
      }

      public connection_getColumns_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Catalog = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SchemaPattern = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                TableNamePattern = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                ColumnNamePattern = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getColumns_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Catalog != null && __isset.catalog) {
          field.Name = "catalog";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Catalog);
          oprot.WriteFieldEnd();
        }
        if (SchemaPattern != null && __isset.schemaPattern) {
          field.Name = "schemaPattern";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SchemaPattern);
          oprot.WriteFieldEnd();
        }
        if (TableNamePattern != null && __isset.tableNamePattern) {
          field.Name = "tableNamePattern";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TableNamePattern);
          oprot.WriteFieldEnd();
        }
        if (ColumnNamePattern != null && __isset.columnNamePattern) {
          field.Name = "columnNamePattern";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ColumnNamePattern);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getColumns_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        if (Catalog != null && __isset.catalog) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Catalog: ");
          __sb.Append(Catalog);
        }
        if (SchemaPattern != null && __isset.schemaPattern) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SchemaPattern: ");
          __sb.Append(SchemaPattern);
        }
        if (TableNamePattern != null && __isset.tableNamePattern) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TableNamePattern: ");
          __sb.Append(TableNamePattern);
        }
        if (ColumnNamePattern != null && __isset.columnNamePattern) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ColumnNamePattern: ");
          __sb.Append(ColumnNamePattern);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getColumns_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getColumns_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getColumns_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getColumns_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getSQLKeywords_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getSQLKeywords_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getSQLKeywords_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getSQLKeywords_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getSQLKeywords_result : TBase
    {
      private string _success;
      private RSQLException _sqlException;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getSQLKeywords_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getSQLKeywords_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getSQLKeywords_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getTableTypes_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getTableTypes_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getTableTypes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getTableTypes_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getTableTypes_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getTableTypes_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getTableTypes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getTableTypes_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getTypeInfo_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public connection_getTypeInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getTypeInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getTypeInfo_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connection_getTypeInfo_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public connection_getTypeInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("connection_getTypeInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connection_getTypeInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class closeConnection_args : TBase
    {
      private RConnection _connection;

      public RConnection Connection
      {
        get
        {
          return _connection;
        }
        set
        {
          __isset.connection = true;
          this._connection = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connection;
      }

      public closeConnection_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Connection = new RConnection();
                Connection.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("closeConnection_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Connection != null && __isset.connection) {
          field.Name = "connection";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Connection.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("closeConnection_args(");
        bool __first = true;
        if (Connection != null && __isset.connection) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Connection: ");
          __sb.Append(Connection== null ? "<null>" : Connection.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class closeConnection_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public closeConnection_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("closeConnection_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("closeConnection_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_close_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_close_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_close_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_close_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_close_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public statement_close_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_close_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_close_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_execute_args : TBase
    {
      private RStatement _statement;
      private string _sql;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }

      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
        public bool sql;
      }

      public statement_execute_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Sql = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_execute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Sql != null && __isset.sql) {
          field.Name = "sql";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sql);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_execute_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        if (Sql != null && __isset.sql) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sql: ");
          __sb.Append(Sql);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_execute_result : TBase
    {
      private bool _success;
      private RSQLException _sqlException;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_execute_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_execute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_execute_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_executeQuery_args : TBase
    {
      private RStatement _statement;
      private string _sql;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }

      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
        public bool sql;
      }

      public statement_executeQuery_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Sql = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_executeQuery_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Sql != null && __isset.sql) {
          field.Name = "sql";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sql);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_executeQuery_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        if (Sql != null && __isset.sql) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sql: ");
          __sb.Append(Sql);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_executeQuery_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_executeQuery_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_executeQuery_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_executeQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_executeUpdate_args : TBase
    {
      private RStatement _statement;
      private string _sql;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }

      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
        public bool sql;
      }

      public statement_executeUpdate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Sql = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_executeUpdate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Sql != null && __isset.sql) {
          field.Name = "sql";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sql);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_executeUpdate_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        if (Sql != null && __isset.sql) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sql: ");
          __sb.Append(Sql);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_executeUpdate_result : TBase
    {
      private int _success;
      private RSQLException _sqlException;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_executeUpdate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_executeUpdate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_executeUpdate_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getResultSet_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_getResultSet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getResultSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getResultSet_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getResultSet_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_getResultSet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getResultSet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getResultSet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getUpdateCount_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_getUpdateCount_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getUpdateCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getUpdateCount_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getUpdateCount_result : TBase
    {
      private int _success;
      private RSQLException _sqlException;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_getUpdateCount_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getUpdateCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getUpdateCount_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getResultSetType_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_getResultSetType_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getResultSetType_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getResultSetType_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getResultSetType_result : TBase
    {
      private int _success;
      private RSQLException _sqlException;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_getResultSetType_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getResultSetType_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getResultSetType_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_cancel_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_cancel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_cancel_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_cancel_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public statement_cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_cancel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_cancel_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_addBatch_args : TBase
    {
      private RStatement _statement;
      private string _sql;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }

      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
        public bool sql;
      }

      public statement_addBatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Sql = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_addBatch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Sql != null && __isset.sql) {
          field.Name = "sql";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sql);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_addBatch_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        if (Sql != null && __isset.sql) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sql: ");
          __sb.Append(Sql);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_addBatch_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public statement_addBatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_addBatch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_addBatch_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_addBatches_args : TBase
    {
      private RStatement _statement;
      private List<string> _sqlList;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }

      public List<string> SqlList
      {
        get
        {
          return _sqlList;
        }
        set
        {
          __isset.sqlList = true;
          this._sqlList = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
        public bool sqlList;
      }

      public statement_addBatches_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  SqlList = new List<string>();
                  TList _list29 = iprot.ReadListBegin();
                  for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                  {
                    string _elem31;
                    _elem31 = iprot.ReadString();
                    SqlList.Add(_elem31);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_addBatches_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (SqlList != null && __isset.sqlList) {
          field.Name = "sqlList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, SqlList.Count));
            foreach (string _iter32 in SqlList)
            {
              oprot.WriteString(_iter32);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_addBatches_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        if (SqlList != null && __isset.sqlList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlList: ");
          __sb.Append(SqlList);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_addBatches_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public statement_addBatches_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_addBatches_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_addBatches_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_clearBatch_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_clearBatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_clearBatch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_clearBatch_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_clearBatch_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public statement_clearBatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_clearBatch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_clearBatch_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_executeBatch_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_executeBatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_executeBatch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_executeBatch_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_executeBatch_result : TBase
    {
      private List<int> _success;
      private RSQLException _sqlException;

      public List<int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_executeBatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list33 = iprot.ReadListBegin();
                  for( int _i34 = 0; _i34 < _list33.Count; ++_i34)
                  {
                    int _elem35;
                    _elem35 = iprot.ReadI32();
                    Success.Add(_elem35);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_executeBatch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, Success.Count));
              foreach (int _iter36 in Success)
              {
                oprot.WriteI32(_iter36);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_executeBatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_execute_args : TBase
    {
      private RStatement _preparedstatement;

      public RStatement Preparedstatement
      {
        get
        {
          return _preparedstatement;
        }
        set
        {
          __isset.preparedstatement = true;
          this._preparedstatement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedstatement;
      }

      public preparedstatement_execute_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Preparedstatement = new RStatement();
                Preparedstatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_execute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Preparedstatement != null && __isset.preparedstatement) {
          field.Name = "preparedstatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Preparedstatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_execute_args(");
        bool __first = true;
        if (Preparedstatement != null && __isset.preparedstatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Preparedstatement: ");
          __sb.Append(Preparedstatement== null ? "<null>" : Preparedstatement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_execute_result : TBase
    {
      private bool _success;
      private RSQLException _sqlException;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public preparedstatement_execute_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_execute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_execute_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_executeQuery_args : TBase
    {
      private RStatement _preparedstatement;

      public RStatement Preparedstatement
      {
        get
        {
          return _preparedstatement;
        }
        set
        {
          __isset.preparedstatement = true;
          this._preparedstatement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedstatement;
      }

      public preparedstatement_executeQuery_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Preparedstatement = new RStatement();
                Preparedstatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_executeQuery_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Preparedstatement != null && __isset.preparedstatement) {
          field.Name = "preparedstatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Preparedstatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_executeQuery_args(");
        bool __first = true;
        if (Preparedstatement != null && __isset.preparedstatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Preparedstatement: ");
          __sb.Append(Preparedstatement== null ? "<null>" : Preparedstatement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_executeQuery_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public preparedstatement_executeQuery_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_executeQuery_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_executeQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_executeUpdate_args : TBase
    {
      private RStatement _preparedstatement;

      public RStatement Preparedstatement
      {
        get
        {
          return _preparedstatement;
        }
        set
        {
          __isset.preparedstatement = true;
          this._preparedstatement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedstatement;
      }

      public preparedstatement_executeUpdate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Preparedstatement = new RStatement();
                Preparedstatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_executeUpdate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Preparedstatement != null && __isset.preparedstatement) {
          field.Name = "preparedstatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Preparedstatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_executeUpdate_args(");
        bool __first = true;
        if (Preparedstatement != null && __isset.preparedstatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Preparedstatement: ");
          __sb.Append(Preparedstatement== null ? "<null>" : Preparedstatement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_executeUpdate_result : TBase
    {
      private int _success;
      private RSQLException _sqlException;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public preparedstatement_executeUpdate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_executeUpdate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_executeUpdate_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParametersThenExecute_args : TBase
    {
      private RStatement _preparedstatement;
      private List<RValueSQL> _parameters;

      public RStatement Preparedstatement
      {
        get
        {
          return _preparedstatement;
        }
        set
        {
          __isset.preparedstatement = true;
          this._preparedstatement = value;
        }
      }

      public List<RValueSQL> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedstatement;
        public bool parameters;
      }

      public preparedstatement_setParametersThenExecute_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Preparedstatement = new RStatement();
                Preparedstatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<RValueSQL>();
                  TList _list37 = iprot.ReadListBegin();
                  for( int _i38 = 0; _i38 < _list37.Count; ++_i38)
                  {
                    RValueSQL _elem39;
                    _elem39 = new RValueSQL();
                    _elem39.Read(iprot);
                    Parameters.Add(_elem39);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParametersThenExecute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Preparedstatement != null && __isset.preparedstatement) {
          field.Name = "preparedstatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Preparedstatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.parameters) {
          field.Name = "parameters";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
            foreach (RValueSQL _iter40 in Parameters)
            {
              _iter40.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParametersThenExecute_args(");
        bool __first = true;
        if (Preparedstatement != null && __isset.preparedstatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Preparedstatement: ");
          __sb.Append(Preparedstatement== null ? "<null>" : Preparedstatement.ToString());
        }
        if (Parameters != null && __isset.parameters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameters: ");
          __sb.Append(Parameters);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParametersThenExecute_result : TBase
    {
      private bool _success;
      private RSQLException _sqlException;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public preparedstatement_setParametersThenExecute_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParametersThenExecute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParametersThenExecute_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParametersThenExecuteQuery_args : TBase
    {
      private RStatement _preparedstatement;
      private List<RValueSQL> _parameters;

      public RStatement Preparedstatement
      {
        get
        {
          return _preparedstatement;
        }
        set
        {
          __isset.preparedstatement = true;
          this._preparedstatement = value;
        }
      }

      public List<RValueSQL> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedstatement;
        public bool parameters;
      }

      public preparedstatement_setParametersThenExecuteQuery_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Preparedstatement = new RStatement();
                Preparedstatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<RValueSQL>();
                  TList _list41 = iprot.ReadListBegin();
                  for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    RValueSQL _elem43;
                    _elem43 = new RValueSQL();
                    _elem43.Read(iprot);
                    Parameters.Add(_elem43);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParametersThenExecuteQuery_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Preparedstatement != null && __isset.preparedstatement) {
          field.Name = "preparedstatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Preparedstatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.parameters) {
          field.Name = "parameters";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
            foreach (RValueSQL _iter44 in Parameters)
            {
              _iter44.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParametersThenExecuteQuery_args(");
        bool __first = true;
        if (Preparedstatement != null && __isset.preparedstatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Preparedstatement: ");
          __sb.Append(Preparedstatement== null ? "<null>" : Preparedstatement.ToString());
        }
        if (Parameters != null && __isset.parameters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameters: ");
          __sb.Append(Parameters);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParametersThenExecuteQuery_result : TBase
    {
      private RResultSet _success;
      private RSQLException _sqlException;

      public RResultSet Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public preparedstatement_setParametersThenExecuteQuery_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RResultSet();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParametersThenExecuteQuery_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParametersThenExecuteQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParametersThenExecuteUpdate_args : TBase
    {
      private RStatement _preparedstatement;
      private List<RValueSQL> _parameters;

      public RStatement Preparedstatement
      {
        get
        {
          return _preparedstatement;
        }
        set
        {
          __isset.preparedstatement = true;
          this._preparedstatement = value;
        }
      }

      public List<RValueSQL> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedstatement;
        public bool parameters;
      }

      public preparedstatement_setParametersThenExecuteUpdate_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Preparedstatement = new RStatement();
                Preparedstatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<RValueSQL>();
                  TList _list45 = iprot.ReadListBegin();
                  for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                  {
                    RValueSQL _elem47;
                    _elem47 = new RValueSQL();
                    _elem47.Read(iprot);
                    Parameters.Add(_elem47);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParametersThenExecuteUpdate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Preparedstatement != null && __isset.preparedstatement) {
          field.Name = "preparedstatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Preparedstatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.parameters) {
          field.Name = "parameters";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
            foreach (RValueSQL _iter48 in Parameters)
            {
              _iter48.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParametersThenExecuteUpdate_args(");
        bool __first = true;
        if (Preparedstatement != null && __isset.preparedstatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Preparedstatement: ");
          __sb.Append(Preparedstatement== null ? "<null>" : Preparedstatement.ToString());
        }
        if (Parameters != null && __isset.parameters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameters: ");
          __sb.Append(Parameters);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParametersThenExecuteUpdate_result : TBase
    {
      private int _success;
      private RSQLException _sqlException;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public preparedstatement_setParametersThenExecuteUpdate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParametersThenExecuteUpdate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParametersThenExecuteUpdate_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParameters_args : TBase
    {
      private RStatement _preparedStatement;
      private List<RValueSQL> _parameters;

      public RStatement PreparedStatement
      {
        get
        {
          return _preparedStatement;
        }
        set
        {
          __isset.preparedStatement = true;
          this._preparedStatement = value;
        }
      }

      public List<RValueSQL> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedStatement;
        public bool parameters;
      }

      public preparedstatement_setParameters_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PreparedStatement = new RStatement();
                PreparedStatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<RValueSQL>();
                  TList _list49 = iprot.ReadListBegin();
                  for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                  {
                    RValueSQL _elem51;
                    _elem51 = new RValueSQL();
                    _elem51.Read(iprot);
                    Parameters.Add(_elem51);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParameters_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PreparedStatement != null && __isset.preparedStatement) {
          field.Name = "preparedStatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PreparedStatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.parameters) {
          field.Name = "parameters";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
            foreach (RValueSQL _iter52 in Parameters)
            {
              _iter52.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParameters_args(");
        bool __first = true;
        if (PreparedStatement != null && __isset.preparedStatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PreparedStatement: ");
          __sb.Append(PreparedStatement== null ? "<null>" : PreparedStatement.ToString());
        }
        if (Parameters != null && __isset.parameters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameters: ");
          __sb.Append(Parameters);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParameters_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public preparedstatement_setParameters_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParameters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParameters_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParameter_args : TBase
    {
      private RStatement _preparedStatement;
      private RValueSQL _parameter;
      private int _position;

      public RStatement PreparedStatement
      {
        get
        {
          return _preparedStatement;
        }
        set
        {
          __isset.preparedStatement = true;
          this._preparedStatement = value;
        }
      }

      public RValueSQL Parameter
      {
        get
        {
          return _parameter;
        }
        set
        {
          __isset.parameter = true;
          this._parameter = value;
        }
      }

      public int Position
      {
        get
        {
          return _position;
        }
        set
        {
          __isset.position = true;
          this._position = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedStatement;
        public bool parameter;
        public bool position;
      }

      public preparedstatement_setParameter_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PreparedStatement = new RStatement();
                PreparedStatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Parameter = new RValueSQL();
                Parameter.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Position = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParameter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PreparedStatement != null && __isset.preparedStatement) {
          field.Name = "preparedStatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PreparedStatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Parameter != null && __isset.parameter) {
          field.Name = "parameter";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Parameter.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.position) {
          field.Name = "position";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Position);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParameter_args(");
        bool __first = true;
        if (PreparedStatement != null && __isset.preparedStatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PreparedStatement: ");
          __sb.Append(PreparedStatement== null ? "<null>" : PreparedStatement.ToString());
        }
        if (Parameter != null && __isset.parameter) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameter: ");
          __sb.Append(Parameter== null ? "<null>" : Parameter.ToString());
        }
        if (__isset.position) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Position: ");
          __sb.Append(Position);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_setParameter_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public preparedstatement_setParameter_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_setParameter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_setParameter_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_clearParameters_args : TBase
    {
      private RStatement _preparedStatement;

      public RStatement PreparedStatement
      {
        get
        {
          return _preparedStatement;
        }
        set
        {
          __isset.preparedStatement = true;
          this._preparedStatement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedStatement;
      }

      public preparedstatement_clearParameters_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PreparedStatement = new RStatement();
                PreparedStatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_clearParameters_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PreparedStatement != null && __isset.preparedStatement) {
          field.Name = "preparedStatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PreparedStatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_clearParameters_args(");
        bool __first = true;
        if (PreparedStatement != null && __isset.preparedStatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PreparedStatement: ");
          __sb.Append(PreparedStatement== null ? "<null>" : PreparedStatement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_clearParameters_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public preparedstatement_clearParameters_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_clearParameters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_clearParameters_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_addBatchWithParameters_args : TBase
    {
      private RStatement _preparedStatement;
      private List<RValueSQL> _parameters;

      public RStatement PreparedStatement
      {
        get
        {
          return _preparedStatement;
        }
        set
        {
          __isset.preparedStatement = true;
          this._preparedStatement = value;
        }
      }

      public List<RValueSQL> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedStatement;
        public bool parameters;
      }

      public preparedstatement_addBatchWithParameters_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PreparedStatement = new RStatement();
                PreparedStatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<RValueSQL>();
                  TList _list53 = iprot.ReadListBegin();
                  for( int _i54 = 0; _i54 < _list53.Count; ++_i54)
                  {
                    RValueSQL _elem55;
                    _elem55 = new RValueSQL();
                    _elem55.Read(iprot);
                    Parameters.Add(_elem55);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_addBatchWithParameters_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PreparedStatement != null && __isset.preparedStatement) {
          field.Name = "preparedStatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PreparedStatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.parameters) {
          field.Name = "parameters";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Parameters.Count));
            foreach (RValueSQL _iter56 in Parameters)
            {
              _iter56.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_addBatchWithParameters_args(");
        bool __first = true;
        if (PreparedStatement != null && __isset.preparedStatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PreparedStatement: ");
          __sb.Append(PreparedStatement== null ? "<null>" : PreparedStatement.ToString());
        }
        if (Parameters != null && __isset.parameters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameters: ");
          __sb.Append(Parameters);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_addBatchWithParameters_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public preparedstatement_addBatchWithParameters_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_addBatchWithParameters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_addBatchWithParameters_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_addBatch_args : TBase
    {
      private RStatement _preparedStatement;

      public RStatement PreparedStatement
      {
        get
        {
          return _preparedStatement;
        }
        set
        {
          __isset.preparedStatement = true;
          this._preparedStatement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool preparedStatement;
      }

      public preparedstatement_addBatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PreparedStatement = new RStatement();
                PreparedStatement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_addBatch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PreparedStatement != null && __isset.preparedStatement) {
          field.Name = "preparedStatement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PreparedStatement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_addBatch_args(");
        bool __first = true;
        if (PreparedStatement != null && __isset.preparedStatement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("PreparedStatement: ");
          __sb.Append(PreparedStatement== null ? "<null>" : PreparedStatement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_addBatch_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public preparedstatement_addBatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_addBatch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_addBatch_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_executeBatch_args : TBase
    {
      private RStatement _statement;
      private List<List<RValueSQL>> _parameters;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }

      public List<List<RValueSQL>> Parameters
      {
        get
        {
          return _parameters;
        }
        set
        {
          __isset.parameters = true;
          this._parameters = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
        public bool parameters;
      }

      public preparedstatement_executeBatch_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Parameters = new List<List<RValueSQL>>();
                  TList _list57 = iprot.ReadListBegin();
                  for( int _i58 = 0; _i58 < _list57.Count; ++_i58)
                  {
                    List<RValueSQL> _elem59;
                    {
                      _elem59 = new List<RValueSQL>();
                      TList _list60 = iprot.ReadListBegin();
                      for( int _i61 = 0; _i61 < _list60.Count; ++_i61)
                      {
                        RValueSQL _elem62;
                        _elem62 = new RValueSQL();
                        _elem62.Read(iprot);
                        _elem59.Add(_elem62);
                      }
                      iprot.ReadListEnd();
                    }
                    Parameters.Add(_elem59);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_executeBatch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Parameters != null && __isset.parameters) {
          field.Name = "parameters";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Parameters.Count));
            foreach (List<RValueSQL> _iter63 in Parameters)
            {
              {
                oprot.WriteListBegin(new TList(TType.Struct, _iter63.Count));
                foreach (RValueSQL _iter64 in _iter63)
                {
                  _iter64.Write(oprot);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_executeBatch_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        if (Parameters != null && __isset.parameters) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Parameters: ");
          __sb.Append(Parameters);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class preparedstatement_executeBatch_result : TBase
    {
      private List<int> _success;
      private RSQLException _sqlException;

      public List<int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public preparedstatement_executeBatch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list65 = iprot.ReadListBegin();
                  for( int _i66 = 0; _i66 < _list65.Count; ++_i66)
                  {
                    int _elem67;
                    _elem67 = iprot.ReadI32();
                    Success.Add(_elem67);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("preparedstatement_executeBatch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, Success.Count));
              foreach (int _iter68 in Success)
              {
                oprot.WriteI32(_iter68);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("preparedstatement_executeBatch_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getWarnings_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_getWarnings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getWarnings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getWarnings_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getWarnings_result : TBase
    {
      private statement_getWarnings_return _success;
      private RSQLException _sqlException;

      public statement_getWarnings_return Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_getWarnings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new statement_getWarnings_return();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getWarnings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getWarnings_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_clearWarnings_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_clearWarnings_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_clearWarnings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_clearWarnings_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_clearWarnings_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public statement_clearWarnings_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_clearWarnings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_clearWarnings_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getMaxRows_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_getMaxRows_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getMaxRows_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getMaxRows_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getMaxRows_result : TBase
    {
      private int _success;
      private RSQLException _sqlException;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_getMaxRows_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getMaxRows_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getMaxRows_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_setMaxRows_args : TBase
    {
      private RStatement _statement;
      private int _max;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }

      public int Max
      {
        get
        {
          return _max;
        }
        set
        {
          __isset.max = true;
          this._max = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
        public bool max;
      }

      public statement_setMaxRows_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Max = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_setMaxRows_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.max) {
          field.Name = "max";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Max);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_setMaxRows_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        if (__isset.max) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Max: ");
          __sb.Append(Max);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_setMaxRows_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public statement_setMaxRows_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_setMaxRows_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_setMaxRows_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getQueryTimeout_args : TBase
    {
      private RStatement _statement;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
      }

      public statement_getQueryTimeout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getQueryTimeout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getQueryTimeout_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_getQueryTimeout_result : TBase
    {
      private int _success;
      private RSQLException _sqlException;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool sqlException;
      }

      public statement_getQueryTimeout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_getQueryTimeout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_getQueryTimeout_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_setQueryTimeout_args : TBase
    {
      private RStatement _statement;
      private int _seconds;

      public RStatement Statement
      {
        get
        {
          return _statement;
        }
        set
        {
          __isset.statement = true;
          this._statement = value;
        }
      }

      public int Seconds
      {
        get
        {
          return _seconds;
        }
        set
        {
          __isset.seconds = true;
          this._seconds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool statement;
        public bool seconds;
      }

      public statement_setQueryTimeout_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Statement = new RStatement();
                Statement.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Seconds = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_setQueryTimeout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Statement != null && __isset.statement) {
          field.Name = "statement";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Statement.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.seconds) {
          field.Name = "seconds";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seconds);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_setQueryTimeout_args(");
        bool __first = true;
        if (Statement != null && __isset.statement) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Statement: ");
          __sb.Append(Statement== null ? "<null>" : Statement.ToString());
        }
        if (__isset.seconds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Seconds: ");
          __sb.Append(Seconds);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class statement_setQueryTimeout_result : TBase
    {
      private RSQLException _sqlException;

      public RSQLException SqlException
      {
        get
        {
          return _sqlException;
        }
        set
        {
          __isset.sqlException = true;
          this._sqlException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool sqlException;
      }

      public statement_setQueryTimeout_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SqlException = new RSQLException();
                SqlException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("statement_setQueryTimeout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.sqlException) {
          if (SqlException != null) {
            field.Name = "SqlException";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            SqlException.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("statement_setQueryTimeout_result(");
        bool __first = true;
        if (SqlException != null && __isset.sqlException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SqlException: ");
          __sb.Append(SqlException== null ? "<null>" : SqlException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
