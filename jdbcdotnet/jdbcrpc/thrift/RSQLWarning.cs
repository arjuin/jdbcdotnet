/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace jdbcrpc.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RSQLWarning : TBase
  {
    private string _reason;
    private string _state;
    private int _vendorCode;

    public string Reason
    {
      get
      {
        return _reason;
      }
      set
      {
        __isset.reason = true;
        this._reason = value;
      }
    }

    public string State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public int VendorCode
    {
      get
      {
        return _vendorCode;
      }
      set
      {
        __isset.vendorCode = true;
        this._vendorCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reason;
      public bool state;
      public bool vendorCode;
    }

    public RSQLWarning() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Reason = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              State = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              VendorCode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RSQLWarning");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Reason != null && __isset.reason) {
        field.Name = "reason";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Reason);
        oprot.WriteFieldEnd();
      }
      if (State != null && __isset.state) {
        field.Name = "state";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(State);
        oprot.WriteFieldEnd();
      }
      if (__isset.vendorCode) {
        field.Name = "vendorCode";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(VendorCode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RSQLWarning(");
      bool __first = true;
      if (Reason != null && __isset.reason) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Reason: ");
        __sb.Append(Reason);
      }
      if (State != null && __isset.state) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("State: ");
        __sb.Append(State);
      }
      if (__isset.vendorCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VendorCode: ");
        __sb.Append(VendorCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
