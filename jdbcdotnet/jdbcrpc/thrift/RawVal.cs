/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace jdbcrpc.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RawVal : TBase
  {
    private long _bigint_val;
    private int _integer_val;
    private short _smallint_val;
    private sbyte _tinyint_val;
    private double _double_val;
    private bool _bool_val;
    private string _string_val;
    private sbyte _msfromepoch_val;
    private byte[] _binary_val;
    private ArrayVal _array_val;

    public long Bigint_val
    {
      get
      {
        return _bigint_val;
      }
      set
      {
        __isset.bigint_val = true;
        this._bigint_val = value;
      }
    }

    public int Integer_val
    {
      get
      {
        return _integer_val;
      }
      set
      {
        __isset.integer_val = true;
        this._integer_val = value;
      }
    }

    public short Smallint_val
    {
      get
      {
        return _smallint_val;
      }
      set
      {
        __isset.smallint_val = true;
        this._smallint_val = value;
      }
    }

    public sbyte Tinyint_val
    {
      get
      {
        return _tinyint_val;
      }
      set
      {
        __isset.tinyint_val = true;
        this._tinyint_val = value;
      }
    }

    public double Double_val
    {
      get
      {
        return _double_val;
      }
      set
      {
        __isset.double_val = true;
        this._double_val = value;
      }
    }

    public bool Bool_val
    {
      get
      {
        return _bool_val;
      }
      set
      {
        __isset.bool_val = true;
        this._bool_val = value;
      }
    }

    public string String_val
    {
      get
      {
        return _string_val;
      }
      set
      {
        __isset.string_val = true;
        this._string_val = value;
      }
    }

    public sbyte Msfromepoch_val
    {
      get
      {
        return _msfromepoch_val;
      }
      set
      {
        __isset.msfromepoch_val = true;
        this._msfromepoch_val = value;
      }
    }

    public byte[] Binary_val
    {
      get
      {
        return _binary_val;
      }
      set
      {
        __isset.binary_val = true;
        this._binary_val = value;
      }
    }

    public ArrayVal Array_val
    {
      get
      {
        return _array_val;
      }
      set
      {
        __isset.array_val = true;
        this._array_val = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bigint_val;
      public bool integer_val;
      public bool smallint_val;
      public bool tinyint_val;
      public bool double_val;
      public bool bool_val;
      public bool string_val;
      public bool msfromepoch_val;
      public bool binary_val;
      public bool array_val;
    }

    public RawVal() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Bigint_val = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Integer_val = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I16) {
              Smallint_val = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Byte) {
              Tinyint_val = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Double_val = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              Bool_val = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              String_val = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Byte) {
              Msfromepoch_val = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Binary_val = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              Array_val = new ArrayVal();
              Array_val.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RawVal");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.bigint_val) {
        field.Name = "bigint_val";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Bigint_val);
        oprot.WriteFieldEnd();
      }
      if (__isset.integer_val) {
        field.Name = "integer_val";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Integer_val);
        oprot.WriteFieldEnd();
      }
      if (__isset.smallint_val) {
        field.Name = "smallint_val";
        field.Type = TType.I16;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Smallint_val);
        oprot.WriteFieldEnd();
      }
      if (__isset.tinyint_val) {
        field.Name = "tinyint_val";
        field.Type = TType.Byte;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Tinyint_val);
        oprot.WriteFieldEnd();
      }
      if (__isset.double_val) {
        field.Name = "double_val";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Double_val);
        oprot.WriteFieldEnd();
      }
      if (__isset.bool_val) {
        field.Name = "bool_val";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Bool_val);
        oprot.WriteFieldEnd();
      }
      if (String_val != null && __isset.string_val) {
        field.Name = "string_val";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(String_val);
        oprot.WriteFieldEnd();
      }
      if (__isset.msfromepoch_val) {
        field.Name = "msfromepoch_val";
        field.Type = TType.Byte;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Msfromepoch_val);
        oprot.WriteFieldEnd();
      }
      if (Binary_val != null && __isset.binary_val) {
        field.Name = "binary_val";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Binary_val);
        oprot.WriteFieldEnd();
      }
      if (Array_val != null && __isset.array_val) {
        field.Name = "array_val";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        Array_val.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RawVal(");
      bool __first = true;
      if (__isset.bigint_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bigint_val: ");
        __sb.Append(Bigint_val);
      }
      if (__isset.integer_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Integer_val: ");
        __sb.Append(Integer_val);
      }
      if (__isset.smallint_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Smallint_val: ");
        __sb.Append(Smallint_val);
      }
      if (__isset.tinyint_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tinyint_val: ");
        __sb.Append(Tinyint_val);
      }
      if (__isset.double_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Double_val: ");
        __sb.Append(Double_val);
      }
      if (__isset.bool_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bool_val: ");
        __sb.Append(Bool_val);
      }
      if (String_val != null && __isset.string_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("String_val: ");
        __sb.Append(String_val);
      }
      if (__isset.msfromepoch_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Msfromepoch_val: ");
        __sb.Append(Msfromepoch_val);
      }
      if (Binary_val != null && __isset.binary_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Binary_val: ");
        __sb.Append(Binary_val);
      }
      if (Array_val != null && __isset.array_val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Array_val: ");
        __sb.Append(Array_val);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
